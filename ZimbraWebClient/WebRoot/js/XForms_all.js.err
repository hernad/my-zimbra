
[INFO] Using charset UTF-8

[WARNING] Try to use a single 'var' statement per scope.
null?document:frame.document); ---> var  <--- it=doc.getElementById(id);if

[WARNING] Try to use a single 'var' statement per scope.
buffer=new AjxBuffer();for( ---> var  <--- i=0;i<value.length;

[WARNING] Try to use a single 'var' statement per scope.
,skipPrototypeProperties){var indentSpacer="    "; ---> var  <--- buffer=[];var hasObject=false;

[WARNING] Try to use a single 'var' statement per scope.
="    ";var buffer=[]; ---> var  <--- hasObject=false;var propCount=0;var 

[WARNING] Try to use a single 'var' statement per scope.
=[];var hasObject=false; ---> var  <--- propCount=0;var proto=object.constructor

[WARNING] Try to use a single 'var' statement per scope.
hasObject=false;var propCount=0; ---> var  <--- proto=object.constructor.prototype;if(

[WARNING] Try to use a single 'var' statement per scope.
{proto={};}for( ---> var  <--- prop in object){var value=object[

[WARNING] Try to use a single 'var' statement per scope.
}for(var prop in object){ ---> var  <--- value=object[prop];if(skipPrototypeProperties

[WARNING] Try to use a single 'var' statement per scope.
a1=a.charAt(0); ---> var  <--- b1=b.charAt(0);var 

[WARNING] Try to use a single 'var' statement per scope.
b1=b.charAt(0); ---> var  <--- aIsSpecial=a1=="_"||a1=="$";

[WARNING] Try to use a single 'var' statement per scope.
=a1=="_"||a1=="$"; ---> var  <--- bIsSpecial=b1=="_"||b1=="$";

[WARNING] Try to use a single 'var' statement per scope.
"ajax.dwt.xforms.XModel")){var _MODEL_="model"; ---> var  <--- _INSTANCE_="instance";var _INHERIT_="inherit";var 

[WARNING] Try to use a single 'var' statement per scope.
_MODEL_="model";var _INSTANCE_="instance"; ---> var  <--- _INHERIT_="inherit";var _MODELITEM_="modelitem";XModel

[WARNING] Try to use a single 'var' statement per scope.
_INSTANCE_="instance";var _INHERIT_="inherit"; ---> var  <--- _MODELITEM_="modelitem";XModel=function(attributes)

[WARNING] Try to use a single 'var' statement per scope.
null);this._itemsAreInitialized=true; ---> var  <--- t1=new Date().getTime()

[WARNING] Try to use a single 'var' statement per scope.
{var items=[];for( ---> var  <--- i=0;i<itemAttrs.length;

[WARNING] Try to use a single 'var' statement per scope.
returnthis._pathIndex[path];} ---> var  <--- normalizedPath=this.normalizePath(path);for

[WARNING] Try to use a single 'var' statement per scope.
this.normalizePath(path);for( ---> var  <--- i=0;i<normalizedPath.length;

[WARNING] Try to use a single 'var' statement per scope.
createIfNecessary!=true){returnnull;} ---> var  <--- parentItem=null;for(var p=0

[WARNING] Try to use a single 'var' statement per scope.
;}var parentItem=null;for( ---> var  <--- p=0;p<normalizedPath.length;

[WARNING] Try to use a single 'var' statement per scope.
<normalizedPath.length;p++){ ---> var  <--- itemPath=normalizedPath.slice(0,p+

[WARNING] Try to use a single 'var' statement per scope.
).join(this.pathDelimiter); ---> var  <--- item=this.getItem(itemPath,false)

[WARNING] The variable item has already been declared in the same scope...
.join(this.pathDelimiter);var  ---> item <--- =this.getItem(itemPath,false);

[WARNING] Try to use a single 'var' statement per scope.
;var outputPath=[];for( ---> var  <--- i=0;i<path.length;

[WARNING] Try to use a single 'var' statement per scope.
<path.length;i++){ ---> var  <--- step=path[i];if(step

[WARNING] Try to use a single 'var' statement per scope.
.setParentInstanceValues(instance,path);} ---> var  <--- modelItem=this.getItem(path,true)

[WARNING] Try to use a single 'var' statement per scope.
this.getItem(path,true); ---> var  <--- leafPath=this.getLeafPath(path);var 

[WARNING] Try to use a single 'var' statement per scope.
leafPath=this.getLeafPath(path); ---> var  <--- ref=modelItem.ref;if(leafPath.

[WARNING] Try to use a single 'var' statement per scope.
pathDelimiter).join(".");} ---> var  <--- setter=modelItem.setter;var scope=modelItem

[WARNING] Try to use a single 'var' statement per scope.
;}var setter=modelItem.setter; ---> var  <--- scope=modelItem.setterScope;if(scope==

[WARNING] Try to use a single 'var' statement per scope.
split(this.pathDelimiter);for( ---> var  <--- i=0;i<ref.length-

[WARNING] Try to use a single 'var' statement per scope.
;}parentValue[ref]=value; ---> var  <--- parentItem=modelItem.getParentItem();if(

[WARNING] Try to use a single 'var' statement per scope.
getParentItem();if(parentItem){ ---> var  <--- parentPath=this.getParentPath(path).join

[WARNING] Try to use a single 'var' statement per scope.
,parentPath,parentValue);}else{ ---> var  <--- event=new DwtXModelEvent(instance,parentItem,parentPath

[WARNING] Try to use a single 'var' statement per scope.
.XFORMS_VALUE_CHANGED,event);}}} ---> var  <--- event=new DwtXModelEvent(instance,modelItem,path

[WARNING] The variable event has already been declared in the same scope...
XFORMS_VALUE_CHANGED,event);}}}var  ---> event <--- =new DwtXModelEvent(instance,modelItem,path,

[WARNING] Try to use a single 'var' statement per scope.
this.getParentPath(path);for( ---> var  <--- i=0;i<pathList.length;

[WARNING] Try to use a single 'var' statement per scope.
<pathList.length;i++){ ---> var  <--- itemPath=pathList.slice(0,i+

[WARNING] Try to use a single 'var' statement per scope.
).join(this.pathDelimiter); ---> var  <--- itemValue=this.getInstanceValue(instance,itemPath)

[WARNING] Try to use a single 'var' statement per scope.
);if(itemValue==null){ ---> var  <--- modelItem=this.getItem(itemPath,true)

[WARNING] Try to use a single 'var' statement per scope.
this.getItem(itemPath,true); ---> var  <--- defaultValue=modelItem.getDefaultValue();itemValue=

[WARNING] Try to use a single 'var' statement per scope.
,afterRow){var newInstance=null; ---> var  <--- modelItem=this.getItem(path);if

[WARNING] Try to use a single 'var' statement per scope.
;}else{newInstance="";} ---> var  <--- list=this.getInstanceValue(instance,path)

[WARNING] Try to use a single 'var' statement per scope.
case_NUMBER_:return0;case_OBJECT_: ---> var  <--- output={};if(modelItem.items

[WARNING] Try to use a single 'var' statement per scope.
if(modelItem.items){for( ---> var  <--- i=0;i<modelItem.items.

[WARNING] Try to use a single 'var' statement per scope.
.items.length;i++){ ---> var  <--- subItem=modelItem.items[i];if

[WARNING] Try to use a single 'var' statement per scope.
(list==null){return;} ---> var  <--- isString=false;if(list instanceof String||

[WARNING] Try to use a single 'var' statement per scope.
=="string"){isString=true;} ---> var  <--- tmpList=isString?list.split(",")

[WARNING] Try to use a single 'var' statement per scope.
list.split(","):list; ---> var  <--- newList=[];var cnt=tmpList.

[WARNING] Try to use a single 'var' statement per scope.
:list;var newList=[]; ---> var  <--- cnt=tmpList.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=tmpList.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
getter!=null){returngetter;} ---> var  <--- parentPath=this.getParentPath(path).join

[WARNING] Try to use a single 'var' statement per scope.
=pathList.slice(1);} ---> var  <--- methodSteps=[];var pathToStep="";

[WARNING] Try to use a single 'var' statement per scope.
);}var methodSteps=[]; ---> var  <--- pathToStep="";for(var i=0

[WARNING] Try to use a single 'var' statement per scope.
];var pathToStep="";for( ---> var  <--- i=0;i<pathList.length;

[WARNING] Try to use a single 'var' statement per scope.
<pathList.length;i++){ ---> var  <--- pathStep=pathList[0,i];if

[WARNING] Try to use a single 'var' statement per scope.
else{pathToStep=pathToStep+pathStep;} ---> var  <--- modelItem=this.getItem(pathToStep,true)

[WARNING] Try to use a single 'var' statement per scope.
this.getItem(pathToStep,true); ---> var  <--- ref=modelItem.ref;if(ref.

[WARNING] Try to use a single 'var' statement per scope.
;}if(modelItem.getter){ ---> var  <--- getter=modelItem.getter;var scope=modelItem

[WARNING] Try to use a single 'var' statement per scope.
){var getter=modelItem.getter; ---> var  <--- scope=modelItem.getterScope;if(scope==

[WARNING] Try to use a single 'var' statement per scope.
}}pathToStep+=this.pathDelimiter;} ---> var  <--- methodBody=AjxBuffer.concat("try {\r","var current = instance;\r",

[WARNING] Try to use a single 'var' statement per scope.
"\": ' + e);\r","	current = null;\r","}\r","return current;\r"); ---> var  <--- method=new Function("instance",methodBody);

[WARNING] Try to use a single 'var' statement per scope.
){var type=attributes.type; ---> var  <--- constructor=this.getItemTypeConstructor(type||_UNTYPED_)

[WARNING] Try to use a single 'var' statement per scope.
this.getItemTypeConstructor(type||_UNTYPED_); ---> var  <--- item=new constructor();item._setAttributes

[WARNING] Try to use a single 'var' statement per scope.
item.ref=item.id;} ---> var  <--- idPath=this.getIdPath(attributes,parentItem)

[WARNING] Try to use a single 'var' statement per scope.
constraints=[constraints];}for( ---> var  <--- i=0;i<constraints.length;

[WARNING] Try to use a single 'var' statement per scope.
<constraints.length;i++){ ---> var  <--- constraint=constraints[i];if(constraint

[WARNING] Try to use a single 'var' statement per scope.
.pattern.length;i++){ ---> var  <--- pattern=this.pattern[i];if

[WARNING] Try to use a single 'var' statement per scope.
"stringLenWrong",length);}}else{ ---> var  <--- maxLength=this.getMaxLength();if(

[WARNING] Try to use a single 'var' statement per scope.
.getErrorMessage("stringTooLong",maxLength);} ---> var  <--- minLength=this.getMinLength();if(

[WARNING] Try to use a single 'var' statement per scope.
"stringLenWrong",length);}}else{ ---> var  <--- maxLength=this.getMaxLength();if(

[WARNING] Try to use a single 'var' statement per scope.
.getErrorMessage("stringTooLong",maxLength);} ---> var  <--- minLength=this.getMinLength();if(

[WARNING] Try to use a single 'var' statement per scope.
.getErrorMessage("stringTooShort",minLength);} ---> var  <--- parts=value.split("@");if

[WARNING] Try to use a single 'var' statement per scope.
replace(/[ ]+/," ");}} ---> var  <--- pattern=this.getPattern();if(

[WARNING] Try to use a single 'var' statement per scope.
);if(pattern!=null){ ---> var  <--- matched=false;for(var i=0

[WARNING] Try to use a single 'var' statement per scope.
){var matched=false;for( ---> var  <--- i=0;i<pattern.length;

[WARNING] Try to use a single 'var' statement per scope.
getErrorMessage("stringMismatch",value);}} ---> var  <--- enumeration=this.getEnumeration();if(

[WARNING] Try to use a single 'var' statement per scope.
);if(enumeration!==null){ ---> var  <--- matched=false;for(var i=0

[WARNING] The variable matched has already been declared in the same scope...
;if(enumeration!==null){var  ---> matched <--- =false;for(var i=0;

[WARNING] Try to use a single 'var' statement per scope.
){var matched=false;for( ---> var  <--- i=0;i<enumeration.length;

[WARNING] The variable i has already been declared in the same scope...
{var matched=false;for(var  ---> i <--- =0;i<enumeration.length;i

[WARNING] Try to use a single 'var' statement per scope.
.getErrorMessage("notANumber",value);} ---> var  <--- totalDigits=this.getTotalDigits();if(

[WARNING] Try to use a single 'var' statement per scope.
if(this.totalDigits!==null){ ---> var  <--- wholePart=Math.floor(nvalue);if

[WARNING] Try to use a single 'var' statement per scope.
"numberTotalExceeded",value,totalDigits);}} ---> var  <--- fractionDigits=this.getFractionDigits();if(

[WARNING] Try to use a single 'var' statement per scope.
if(this.fractionDigits!==null){ ---> var  <--- fractionPart=String(nvalue-Math.floor(

[WARNING] Try to use a single 'var' statement per scope.
"numberFractionExceeded",value,fractionDigits);}} ---> var  <--- maxInclusive=this.getMaxInclusive();if(

[WARNING] Try to use a single 'var' statement per scope.
.getErrorMessage("numberMoreThanMax",maxInclusive);} ---> var  <--- maxExclusive=this.getMaxExclusive();if(

[WARNING] Try to use a single 'var' statement per scope.
.getErrorMessage("numberMoreThanEqualMax",maxExclusive);} ---> var  <--- minInclusive=this.getMinInclusive();if(

[WARNING] Try to use a single 'var' statement per scope.
.getErrorMessage("numberLessThanMin",minInclusive);} ---> var  <--- minExclusive=this.getMinExclusive();if(

[WARNING] Try to use a single 'var' statement per scope.
fvalue=this.validateNumber(value); ---> var  <--- nvalue=parseInt(value);if(nvalue

[WARNING] Try to use a single 'var' statement per scope.
indexOf("/")>-1){ ---> var  <--- dateStrs=value.split("/");if

[WARNING] Try to use a single 'var' statement per scope.
if(dateStrs.length==3){ ---> var  <--- month=dateStrs[0];var day=

[WARNING] Try to use a single 'var' statement per scope.
{var month=dateStrs[0]; ---> var  <--- day=dateStrs[1];var year=

[WARNING] Try to use a single 'var' statement per scope.
;var day=dateStrs[1]; ---> var  <--- year=dateStrs[2];if(month

[WARNING] Try to use a single 'var' statement per scope.
(dStr){var pattern=/^[0]*(.*)$/; ---> var  <--- result=dStr.match(pattern);if

[WARNING] Try to use a single 'var' statement per scope.
(":");var isPM=false; ---> var  <--- lastPiece=value[value.length-1]

[WARNING] Try to use a single 'var' statement per scope.
toLowerCase())>-1); ---> var  <--- hour=parseInt(value[0]);

[WARNING] Try to use a single 'var' statement per scope.
=parseInt(value[0]); ---> var  <--- min=parseInt(value[1]);

[WARNING] Try to use a single 'var' statement per scope.
=parseInt(value[1]); ---> var  <--- sec=(value.length==3?parseInt

[WARNING] Try to use a single 'var' statement per scope.
indexOf(":")>-1){ ---> var  <--- time=value.split(" ")[1

[WARNING] Using 'eval' is not recommended. Moreover, using 'eval' reduces the level of compression!
,current,ref){var value= ---> eval <--- ("ins."+ref);if(value&&

[WARNING] Using 'eval' is not recommended. Moreover, using 'eval' reduces the level of compression!
split(this.getInputDelimiter()); ---> eval <--- ("ins."+ref+" = value");returnvalue

[WARNING] Try to use a single 'var' statement per scope.
" = value");returnvalue;}else{ ---> var  <--- value=eval("ins."+ref+" = val")

[WARNING] The variable value has already been declared in the same scope...
);returnvalue;}else{var  ---> value <--- =eval("ins."+ref+" = val");

[WARNING] Using 'eval' is not recommended. Moreover, using 'eval' reduces the level of compression!
returnvalue;}else{var value= ---> eval <--- ("ins."+ref+" = val");returnvalue

[WARNING] Try to use a single 'var' statement per scope.
if(selectionIsOpen){returnvalue;} ---> var  <--- choices=this.getChoices();for(

[WARNING] Try to use a single 'var' statement per scope.
=this.getChoices();for( ---> var  <--- i=0;i<choices.length;

[WARNING] Try to use a single 'var' statement per scope.
<choices.length;i++){ ---> var  <--- choice=choices[i];if(AjxUtil

[WARNING] Using 'eval' is not recommended. Moreover, using 'eval' reduces the level of compression!
,current,ref){var value= ---> eval <--- ("ins."+ref);returnvalue?AjxUtil

[WARNING] Using 'eval' is not recommended. Moreover, using 'eval' reduces the level of compression!
,current,ref){var value= ---> eval <--- ("ins."+ref+" = AjxUtil.parseSize(val, this.units)");returnisNaN

[WARNING] Try to use a single 'var' statement per scope.
=false;XForm._showBorder=false; ---> var  <--- _IGNORE_CACHE_="IGNORE_CACHE";var _UNDEFINED_;var _UNDEFINED_;

[WARNING] Try to use a single 'var' statement per scope.
_showBorder=false;var _IGNORE_CACHE_="IGNORE_CACHE"; ---> var  <--- _UNDEFINED_;var _UNDEFINED_;var _ALL_="all";

[WARNING] Try to use a single 'var' statement per scope.
;var _IGNORE_CACHE_="IGNORE_CACHE";var _UNDEFINED_; ---> var  <--- _UNDEFINED_;var _ALL_="all";var _NONE_=

[WARNING] The variable _UNDEFINED_ has already been declared in the same scope...
var _IGNORE_CACHE_="IGNORE_CACHE";var _UNDEFINED_;var  ---> _UNDEFINED_ <--- ;var _ALL_="all";var _NONE_="none"

[WARNING] Try to use a single 'var' statement per scope.
="IGNORE_CACHE";var _UNDEFINED_;var _UNDEFINED_; ---> var  <--- _ALL_="all";var _NONE_="none";var 

[WARNING] Try to use a single 'var' statement per scope.
;var _UNDEFINED_;var _ALL_="all"; ---> var  <--- _NONE_="none";var _LEFT_="left";var 

[WARNING] Try to use a single 'var' statement per scope.
_ALL_="all";var _NONE_="none"; ---> var  <--- _LEFT_="left";var _TOP_="top";var 

[WARNING] Try to use a single 'var' statement per scope.
_NONE_="none";var _LEFT_="left"; ---> var  <--- _TOP_="top";var _RIGHT_="right";var 

[WARNING] Try to use a single 'var' statement per scope.
_LEFT_="left";var _TOP_="top"; ---> var  <--- _RIGHT_="right";var _BOTTOM_="bottom";var 

[WARNING] Try to use a single 'var' statement per scope.
_TOP_="top";var _RIGHT_="right"; ---> var  <--- _BOTTOM_="bottom";var _CENTER_="center";var 

[WARNING] Try to use a single 'var' statement per scope.
_RIGHT_="right";var _BOTTOM_="bottom"; ---> var  <--- _CENTER_="center";var _MIDDLE_="middle";var 

[WARNING] Try to use a single 'var' statement per scope.
_BOTTOM_="bottom";var _CENTER_="center"; ---> var  <--- _MIDDLE_="middle";var _INLINE_="inline";var 

[WARNING] Try to use a single 'var' statement per scope.
_CENTER_="center";var _MIDDLE_="middle"; ---> var  <--- _INLINE_="inline";var _HIDE_="hide";var 

[WARNING] Try to use a single 'var' statement per scope.
_MIDDLE_="middle";var _INLINE_="inline"; ---> var  <--- _HIDE_="hide";var _BLOCK_HIDE_="block_hide";var 

[WARNING] Try to use a single 'var' statement per scope.
_INLINE_="inline";var _HIDE_="hide"; ---> var  <--- _BLOCK_HIDE_="block_hide";var _DISABLE_="disable";var 

[WARNING] Try to use a single 'var' statement per scope.
_HIDE_="hide";var _BLOCK_HIDE_="block_hide"; ---> var  <--- _DISABLE_="disable";var _SHOW_DISABLED_="show_disabled";var 

[WARNING] Try to use a single 'var' statement per scope.
_BLOCK_HIDE_="block_hide";var _DISABLE_="disable"; ---> var  <--- _SHOW_DISABLED_="show_disabled";var _PARENT_="parent";var 

[WARNING] Try to use a single 'var' statement per scope.
_DISABLE_="disable";var _SHOW_DISABLED_="show_disabled"; ---> var  <--- _PARENT_="parent";var _SELF_="self";var 

[WARNING] Try to use a single 'var' statement per scope.
_SHOW_DISABLED_="show_disabled";var _PARENT_="parent"; ---> var  <--- _SELF_="self";var _OPEN_="open";var 

[WARNING] Try to use a single 'var' statement per scope.
_PARENT_="parent";var _SELF_="self"; ---> var  <--- _OPEN_="open";var _CLOSED_="closed";var 

[WARNING] Try to use a single 'var' statement per scope.
_SELF_="self";var _OPEN_="open"; ---> var  <--- _CLOSED_="closed";var _HIDDEN_="hidden";var 

[WARNING] Try to use a single 'var' statement per scope.
_OPEN_="open";var _CLOSED_="closed"; ---> var  <--- _HIDDEN_="hidden";var _SCROLL_="scroll";var 

[WARNING] Try to use a single 'var' statement per scope.
_CLOSED_="closed";var _HIDDEN_="hidden"; ---> var  <--- _SCROLL_="scroll";var _AUTO_="auto";var 

[WARNING] Try to use a single 'var' statement per scope.
_HIDDEN_="hidden";var _SCROLL_="scroll"; ---> var  <--- _AUTO_="auto";var _VISIBLE_="visible";XForm

[WARNING] Try to use a single 'var' statement per scope.
_SCROLL_="scroll";var _AUTO_="auto"; ---> var  <--- _VISIBLE_="visible";XForm.prototype.refresh=

[WARNING] Try to use a single 'var' statement per scope.
);if(el!=null){ ---> var  <--- tagName=el.tagName;if(tagName!=

[WARNING] Try to use a single 'var' statement per scope.
[currentTabId];}else{for( ---> var  <--- a in this.tabIdOrder){if(this

[WARNING] Try to use a single 'var' statement per scope.
;}}}if(tabIdOrder){ ---> var  <--- cnt=tabIdOrder.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=tabIdOrder.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- nextItem=this.getItemById(tabIdOrder[i]

[WARNING] Try to use a single 'var' statement per scope.
var myId=id?id:null; ---> var  <--- tabIdOrder=null;if(currentTabId!=null)

[WARNING] Try to use a single 'var' statement per scope.
tabIdOrder&&tabIdOrder.length>0){ ---> var  <--- cnt=tabIdOrder.length;if(myId!=

[WARNING] Try to use a single 'var' statement per scope.
if(myId!=null){for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
(tabIdOrder[i]==myId){ ---> var  <--- elIndex=((i+1)%cnt

[WARNING] Try to use a single 'var' statement per scope.
;if(tabIdOrder[elIndex]){ ---> var  <--- nextEl=this.getItemById(tabIdOrder[elIndex]

[WARNING] Try to use a single 'var' statement per scope.
var myId=id?id:null; ---> var  <--- tabIdOrder=null;if(currentTabId!=null)

[WARNING] Try to use a single 'var' statement per scope.
tabIdOrder&&tabIdOrder.length>0){ ---> var  <--- cnt=tabIdOrder.length-1;if(

[WARNING] Try to use a single 'var' statement per scope.
if(myId!=null){for( ---> var  <--- i=cnt;i>=0;i--

[WARNING] Try to use a single 'var' statement per scope.
(tabIdOrder[i]==myId){ ---> var  <--- elIndex=((i-1)%cnt

[WARNING] Try to use a single 'var' statement per scope.
;if(tabIdOrder[elIndex]){ ---> var  <--- nextEl=this.getItemById(tabIdOrder[elIndex]

[WARNING] Try to use a single 'var' statement per scope.
{var items=[];for( ---> var  <--- i=0;i<itemAttrs.length;

[WARNING] Try to use a single 'var' statement per scope.
<itemAttrs.length;i++){ ---> var  <--- attr=itemAttrs[i];if(attr

[WARNING] Try to use a single 'var' statement per scope.
||exId==""){return;} ---> var  <--- arr=this.__externalIdIndex[exId];if

[WARNING] Try to use a single 'var' statement per scope.
document.getElementById(this.__id); ---> var  <--- dwtContainer=this.getHtmlElement();if(

[WARNING] Try to use a single 'var' statement per scope.
new Date().getTime(); ---> var  <--- html=new AjxBuffer();var items=

[WARNING] Try to use a single 'var' statement per scope.
;var html=new AjxBuffer(); ---> var  <--- items=this.getItems();html.

[WARNING] Try to use a single 'var' statement per scope.
return0;}var outstandingRowSpanCols=0; ---> var  <--- previousRowSpans=parentItem.__rowSpanItems;if(previousRowSpans)

[WARNING] Try to use a single 'var' statement per scope.
__rowSpanItems;if(previousRowSpans){for( ---> var  <--- i=previousRowSpans.length-1;i>=

[WARNING] Try to use a single 'var' statement per scope.
;i>=0;i--){ ---> var  <--- previousItem=previousRowSpans[i];previousItem.__numOutstandingRows

[WARNING] Try to use a single 'var' statement per scope.
)==false&&skipTable!=true); ---> var  <--- outerStyle=null;if(!skipOuter){

[WARNING] Try to use a single 'var' statement per scope.
);}}if(drawTable){ ---> var  <--- colSizes=parentItem.getColSizes();var cellspacing

[WARNING] Try to use a single 'var' statement per scope.
var colSizes=parentItem.getColSizes(); ---> var  <--- cellspacing=parentItem.getInheritedProperty("cellspacing");var 

[WARNING] Try to use a single 'var' statement per scope.
cellspacing=parentItem.getInheritedProperty("cellspacing"); ---> var  <--- cellpadding=parentItem.getInheritedProperty("cellpadding");var 

[WARNING] Try to use a single 'var' statement per scope.
cellpadding=parentItem.getInheritedProperty("cellpadding"); ---> var  <--- border=parentItem.getInheritedProperty("border");if

[WARNING] Try to use a single 'var' statement per scope.
html.append(" <colgroup>");for( ---> var  <--- i=0;i<colSizes.length;

[WARNING] Try to use a single 'var' statement per scope.
<colSizes.length;i++){ ---> var  <--- size=colSizes[i];if(!

[WARNING] Try to use a single 'var' statement per scope.
){currentCol=0;}for( ---> var  <--- itemNum=0;itemNum<items.length;

[WARNING] Try to use a single 'var' statement per scope.
<items.length;itemNum++){ ---> var  <--- item=items[itemNum];var isNestingItem=

[WARNING] Try to use a single 'var' statement per scope.
{var item=items[itemNum]; ---> var  <--- isNestingItem=(item.getItems()!=null

[WARNING] Try to use a single 'var' statement per scope.
item.getItems()!=null); ---> var  <--- itemUsesParentTable=(item.getUseParentTable()!=false

[WARNING] Try to use a single 'var' statement per scope.
false);item.__numDrawnCols=0; ---> var  <--- label=item.getLabel();var labelLocation

[WARNING] Try to use a single 'var' statement per scope.
var label=item.getLabel(); ---> var  <--- labelLocation=item.getLabelLocation();var showLabel

[WARNING] Try to use a single 'var' statement per scope.
var labelLocation=item.getLabelLocation(); ---> var  <--- showLabel=(label!=null&&(labelLocation==

[WARNING] Try to use a single 'var' statement per scope.
==_LEFT_||labelLocation==_RIGHT_)); ---> var  <--- colSpan=item.getColSpan();if(

[WARNING] Try to use a single 'var' statement per scope.
,(numCols-currentCol));} ---> var  <--- rowSpan=item.getRowSpan();var totalItemCols

[WARNING] Try to use a single 'var' statement per scope.
var rowSpan=item.getRowSpan(); ---> var  <--- totalItemCols=item.__numDrawnCols=parseInt(colSpan)

[WARNING] Try to use a single 'var' statement per scope.
(html,rowSpan,labelLocation);} ---> var  <--- writeElementDiv=item.getWriteElementDiv();var outputMethod

[WARNING] Try to use a single 'var' statement per scope.
var writeElementDiv=item.getWriteElementDiv(); ---> var  <--- outputMethod=item.getOutputHTMLMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
);}item.dirtyDisplay(); ---> var  <--- modelItem=item.getSubModelItem();var errorCorrected

[WARNING] Try to use a single 'var' statement per scope.
var modelItem=item.getSubModelItem(); ---> var  <--- errorCorrected=false;if(modelItem!=null)

[WARNING] Try to use a single 'var' statement per scope.
){item.setError(message); ---> var  <--- event=new DwtXFormsEvent(this,item,value

[WARNING] The variable event has already been declared in the same scope...
{item.setError(message);var  ---> event <--- =new DwtXFormsEvent(this,item,value)

[WARNING] Try to use a single 'var' statement per scope.
XFORMS_VALUE_ERROR,event);return;}} ---> var  <--- onChangeMethod=item.cacheInheritedMethod("onSubChange","$onSubChange",

[WARNING] Try to use a single 'var' statement per scope.
,event,this);}else{ ---> var  <--- oldVal=item.getInstanceValue(item.getInheritedProperty(

[WARNING] Try to use a single 'var' statement per scope.
,item.getSubRefPath());} ---> var  <--- event=new DwtXFormsEvent(this,item,value

[WARNING] The variable event has already been declared in the same scope...
item.getSubRefPath());}var  ---> event <--- =new DwtXFormsEvent(this,item,value)

[WARNING] Try to use a single 'var' statement per scope.
);}item.dirtyDisplay(); ---> var  <--- modelItem=item.getModelItem();var errorCorrected

[WARNING] Try to use a single 'var' statement per scope.
var modelItem=item.getModelItem(); ---> var  <--- errorCorrected=false;if(modelItem!=null)

[WARNING] Try to use a single 'var' statement per scope.
){item.setError(message); ---> var  <--- event=new DwtXFormsEvent(this,item,value

[WARNING] The variable event has already been declared in the same scope...
{item.setError(message);var  ---> event <--- =new DwtXFormsEvent(this,item,value)

[WARNING] Try to use a single 'var' statement per scope.
XFORMS_VALUE_ERROR,event);return;}} ---> var  <--- onChangeMethod=item.getOnChangeMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
,event,this);}else{ ---> var  <--- oldVal=item.getInstanceValue();if(

[WARNING] Try to use a single 'var' statement per scope.
}item.setInstanceValue(value);} ---> var  <--- event=new DwtXFormsEvent(this,item,value

[WARNING] The variable event has already been declared in the same scope...
item.setInstanceValue(value);}var  ---> event <--- =new DwtXFormsEvent(this,item,value)

[WARNING] Try to use a single 'var' statement per scope.
var errs=this.getItemsInErrorState(); ---> var  <--- oldItem=errs[item.getId()]

[WARNING] Try to use a single 'var' statement per scope.
var errs=this.getItemsInErrorState(); ---> var  <--- id=item.getId();var oldItem

[WARNING] Try to use a single 'var' statement per scope.
var id=item.getId(); ---> var  <--- oldItem=errs[id];if(oldItem

[WARNING] Try to use a single 'var' statement per scope.
if(errs.size>0){ ---> var  <--- k;for(k in errs){if

[WARNING] Try to use a single 'var' statement per scope.
this.getItemById(this.__focusObject); ---> var  <--- element=item.getElement();if(

[WARNING] Try to use a single 'var' statement per scope.
this.getItemById(this.__focusObject); ---> var  <--- element=item.getElement();if(

[WARNING] Try to use a single 'var' statement per scope.
var insertMethod=item.getInsertMethod(); ---> var  <--- widget=item.getWidget();if(

[WARNING] Try to use a single 'var' statement per scope.
this.getRefPath(attributes,parentItem); ---> var  <--- subRefPath=this.getSubRefPath(attributes,parentItem)

[WARNING] Try to use a single 'var' statement per scope.
this.getSubRefPath(attributes,parentItem); ---> var  <--- modelItem,subModelItem;if(refPath!=null)

[WARNING] Try to use a single 'var' statement per scope.
.xmodel,attributes,subRefPath);} ---> var  <--- type=this.getItemType(attributes,modelItem)

[WARNING] Try to use a single 'var' statement per scope.
this.getItemType(attributes,modelItem); ---> var  <--- constructor=this.getItemTypeConstructor(type,xform)

[WARNING] Try to use a single 'var' statement per scope.
this.getItemTypeConstructor(type,xform); ---> var  <--- item=new constructor();item._setAttributes

[WARNING] Try to use a single 'var' statement per scope.
);item._setAttributes(attributes); ---> var  <--- idPrefix=(attributes.id?xform.getId

[WARNING] Try to use a single 'var' statement per scope.
returnnull;}if(parentItem){ ---> var  <--- parentPath=parentItem.getRefPath();if(

[WARNING] Try to use a single 'var' statement per scope.
{parentPath="";}}else{ ---> var  <--- parentPath="";}var path=ref;

[WARNING] The variable parentPath has already been declared in the same scope...
parentPath="";}}else{var  ---> parentPath <--- ="";}var path=ref;if

[WARNING] Try to use a single 'var' statement per scope.
}else{var parentPath="";} ---> var  <--- path=ref;if(ref==".")

[WARNING] Try to use a single 'var' statement per scope.
returnnull;}if(parentItem){ ---> var  <--- parentPath=parentItem.getSubRefPath();if(

[WARNING] Try to use a single 'var' statement per scope.
{parentPath="";}}else{ ---> var  <--- parentPath="";}var path=subRref;

[WARNING] The variable parentPath has already been declared in the same scope...
parentPath="";}}else{var  ---> parentPath <--- ="";}var path=subRref;if

[WARNING] Try to use a single 'var' statement per scope.
}else{var parentPath="";} ---> var  <--- path=subRref;if(subRref==".")

[WARNING] Try to use a single 'var' statement per scope.
type=attributes.type=_OUTPUT_;} ---> var  <--- modelType=(modelItem&&modelItem.type?modelItem

[WARNING] Try to use a single 'var' statement per scope.
else{if(type==_SELECT_){ ---> var  <--- appearance=attributes.appearance;if(appearance==

[WARNING] Try to use a single 'var' statement per scope.
form.typeConstructorMap:this.typeConstructorMap); ---> var  <--- typeConstructor=typeConstructorMap[typeName];if(typeConstructor

[WARNING] Try to use a single 'var' statement per scope.
];if(typeConstructor==null){ ---> var  <--- defaultItemType=(form?form.defaultItemType:this

[WARNING] Try to use a single 'var' statement per scope.
{for(var type in itemDefaults){ ---> var  <--- originalConstructor=this.typeConstructorMap[type];var 

[WARNING] Try to use a single 'var' statement per scope.
originalConstructor=this.typeConstructorMap[type]; ---> var  <--- defaults=itemDefaults[type];if(originalConstructor

[WARNING] Try to use a single 'var' statement per scope.
(originalConstructor==null){continue;} ---> var  <--- newConstructor=form.typeConstructorMap[type]=new 

[WARNING] Try to use a single 'var' statement per scope.
.prototype.constructor=newConstructor;for( ---> var  <--- prop in defaults){newConstructor.prototype[prop

[WARNING] Try to use a single 'var' statement per scope.
(this);if(currentTabId){ ---> var  <--- tabGroupItem=this.getForm().getItemById(

[WARNING] Try to use a single 'var' statement per scope.
;modelItem=this.getModelItem(); ---> var  <--- itemsVisibilityChangers=this.getInheritedProperty("visibilityChangeEventSources");if

[WARNING] Try to use a single 'var' statement per scope.
!AjxUtil.isEmpty(itemsVisibilityChangers)){ ---> var  <--- model=this.getModel();var cnt

[WARNING] Try to use a single 'var' statement per scope.
var model=this.getModel(); ---> var  <--- cnt=itemsVisibilityChangers.length;if(model&&

[WARNING] Try to use a single 'var' statement per scope.
model&&cnt>0){for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- modelItm=model.getItem(itemsVisibilityChangers[i]

[WARNING] Try to use a single 'var' statement per scope.
,false);if(modelItm){ ---> var  <--- lsnr=new AjxListener(this,XFormItem.prototype

[WARNING] Try to use a single 'var' statement per scope.
XFORMS_VALUE_CHANGED,lsnr);}}}} ---> var  <--- itemsEnableDisableChangers=this.getInheritedProperty("enableDisableChangeEventSources");if

[WARNING] Try to use a single 'var' statement per scope.
!AjxUtil.isEmpty(itemsEnableDisableChangers)){ ---> var  <--- model=this.getModel();var cnt

[WARNING] The variable model has already been declared in the same scope...
AjxUtil.isEmpty(itemsEnableDisableChangers)){var  ---> model <--- =this.getModel();var cnt=

[WARNING] Try to use a single 'var' statement per scope.
var model=this.getModel(); ---> var  <--- cnt=itemsEnableDisableChangers.length;if(model&&

[WARNING] The variable cnt has already been declared in the same scope...
model=this.getModel();var  ---> cnt <--- =itemsEnableDisableChangers.length;if(model&&cnt

[WARNING] Try to use a single 'var' statement per scope.
model&&cnt>0){for( ---> var  <--- i=0;i<cnt;i++

[WARNING] The variable i has already been declared in the same scope...
&&cnt>0){for(var  ---> i <--- =0;i<cnt;i++)

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- modelItm=model.getItem(itemsEnableDisableChangers[i]

[WARNING] The variable modelItm has already been declared in the same scope...
i<cnt;i++){var  ---> modelItm <--- =model.getItem(itemsEnableDisableChangers[i],

[WARNING] Try to use a single 'var' statement per scope.
,false);if(modelItm){ ---> var  <--- lsnr=new AjxListener(this,XFormItem.prototype

[WARNING] The variable lsnr has already been declared in the same scope...
false);if(modelItm){var  ---> lsnr <--- =new AjxListener(this,XFormItem.prototype.

[WARNING] Try to use a single 'var' statement per scope.
XFORMS_VALUE_CHANGED,lsnr);}}}} ---> var  <--- itemsValueChangers=this.getInheritedProperty("valueChangeEventSources");if

[WARNING] Try to use a single 'var' statement per scope.
!AjxUtil.isEmpty(itemsValueChangers)){ ---> var  <--- model=this.getModel();var cnt

[WARNING] The variable model has already been declared in the same scope...
AjxUtil.isEmpty(itemsValueChangers)){var  ---> model <--- =this.getModel();var cnt=

[WARNING] Try to use a single 'var' statement per scope.
var model=this.getModel(); ---> var  <--- cnt=itemsValueChangers.length;if(model&&

[WARNING] The variable cnt has already been declared in the same scope...
model=this.getModel();var  ---> cnt <--- =itemsValueChangers.length;if(model&&cnt

[WARNING] Try to use a single 'var' statement per scope.
model&&cnt>0){for( ---> var  <--- i=0;i<cnt;i++

[WARNING] The variable i has already been declared in the same scope...
&&cnt>0){for(var  ---> i <--- =0;i<cnt;i++)

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- modelItm=model.getItem(itemsValueChangers[i]

[WARNING] The variable modelItm has already been declared in the same scope...
i<cnt;i++){var  ---> modelItm <--- =model.getItem(itemsValueChangers[i],

[WARNING] Try to use a single 'var' statement per scope.
,false);if(modelItm){ ---> var  <--- lsnr=new AjxListener(this,XFormItem.prototype

[WARNING] The variable lsnr has already been declared in the same scope...
false);if(modelItm){var  ---> lsnr <--- =new AjxListener(this,XFormItem.prototype.

[WARNING] Try to use a single 'var' statement per scope.
XFORMS_VALUE_CHANGED,lsnr);}}}} ---> var  <--- bmolsnr=this.getInheritedProperty("bmolsnr");if

[WARNING] Try to use a single 'var' statement per scope.
);if(modelItem&&bmolsnr){ ---> var  <--- lsnr=new AjxListener(this,XFormItem.prototype

[WARNING] The variable lsnr has already been declared in the same scope...
;if(modelItem&&bmolsnr){var  ---> lsnr <--- =new AjxListener(this,XFormItem.prototype.

[WARNING] Try to use a single 'var' statement per scope.
if(!updateMethod){return;} ---> var  <--- value=this.getInstanceValue();var getDisplayValueMethod

[WARNING] Try to use a single 'var' statement per scope.
var value=this.getInstanceValue(); ---> var  <--- getDisplayValueMethod=this.getDisplayValueMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
.activeChildren[itemId]===true){ ---> var  <--- item=this.getForm().getItemById(

[WARNING] Try to use a single 'var' statement per scope.
item&&this.getInstance()){ ---> var  <--- updateMethod=item.getUpdateElementMethod();var getDisplayValueMethod

[WARNING] Try to use a single 'var' statement per scope.
var updateMethod=item.getUpdateElementMethod(); ---> var  <--- getDisplayValueMethod=item.getDisplayValueMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
getDisplayValueMethod();if(updateMethod){ ---> var  <--- xmodel=this.getModel();var value

[WARNING] Try to use a single 'var' statement per scope.
var xmodel=this.getModel(); ---> var  <--- value=item.getRefPath()?xmodel.

[WARNING] Try to use a single 'var' statement per scope.
instance.getAttrs){returnfalse;} ---> var  <--- refPath=null;if(refToCheck){refPath

[WARNING] Try to use a single 'var' statement per scope.
instance.setAttrs){returnfalse;} ---> var  <--- refPath=null;if(refToCheck){refPath

[WARNING] Try to use a single 'var' statement per scope.
function(){var isVisible=true; ---> var  <--- parentItem=this.getParentItem();if(

[WARNING] Try to use a single 'var' statement per scope.
();}if(isVisible){ ---> var  <--- myVisibilityChecks=this.getInheritedProperty("visibilityChecks");if

[WARNING] Try to use a single 'var' statement per scope.
if(myVisibilityChecks&&myVisibilityChecks instanceof Array){ ---> var  <--- cnt=myVisibilityChecks.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=myVisibilityChecks.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
(myVisibilityChecks[i] instanceof Array){ ---> var  <--- func=myVisibilityChecks[i].shift()

[WARNING] Try to use a single 'var' statement per scope.
myVisibilityChecks[i])=="string"){ ---> var  <--- instance=this.getInstance();isVisible=

[WARNING] Using 'eval' is not recommended. Moreover, using 'eval' reduces the level of compression!
=this.getInstance();isVisible= ---> eval <--- (myVisibilityChecks[i]);if(!

[WARNING] Try to use a single 'var' statement per scope.
;}}}}}}}} ---> var  <--- reRunRefresh=false;if(isVisible){if

[WARNING] Try to use a single 'var' statement per scope.
this.hide();}for( ---> var  <--- itemId in this.activeChildren){if(this

[WARNING] Try to use a single 'var' statement per scope.
.activeChildren[itemId]===true){ ---> var  <--- item=this.getForm().getItemById(

[WARNING] Try to use a single 'var' statement per scope.
item&&this.getInstance()){ ---> var  <--- updateMethod=item.getUpdateVisibilityMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
(parentDisabled){var isEnabled=true; ---> var  <--- parentItem=this.getParentItem();if(

[WARNING] Try to use a single 'var' statement per scope.
();}if(isEnabled){ ---> var  <--- myEnabledDisabledChecks=this.getInheritedProperty("enableDisableChecks");if

[WARNING] Try to use a single 'var' statement per scope.
if(myEnabledDisabledChecks&&myEnabledDisabledChecks instanceof Array){ ---> var  <--- cnt=myEnabledDisabledChecks.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=myEnabledDisabledChecks.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
(myEnabledDisabledChecks[i] instanceof Array){ ---> var  <--- func=myEnabledDisabledChecks[i].shift()

[WARNING] Try to use a single 'var' statement per scope.
this.disableElement();}for( ---> var  <--- itemId in this.activeChildren){if(this

[WARNING] Try to use a single 'var' statement per scope.
.activeChildren[itemId]===true){ ---> var  <--- item=this.getForm().getItemById(

[WARNING] Try to use a single 'var' statement per scope.
item&&this.getInstance()){ ---> var  <--- updateMethod=item.getUpdateEnabledDisabledtMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
;this.__errorState=XFormItem.ERROR_STATE_ERROR; ---> var  <--- container=this.getErrorContainer(true);if

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getErrorCssClass(); ---> var  <--- container=this.getContainer();if(

[WARNING] Try to use a single 'var' statement per scope.
,itemId=this.getId(); ---> var  <--- inputHelp=this.getInheritedProperty("inputHelp");var 

[WARNING] Try to use a single 'var' statement per scope.
inputHelp=this.getInheritedProperty("inputHelp"); ---> var  <--- clearInputHelpScript="";if(inputHelp!=null)

[WARNING] Try to use a single 'var' statement per scope.
clearInputHelpScript="if (this.value == '"+inputHelp+"') this.value=''; ";} ---> var  <--- onFocusAction=null;if(this.getInheritedProperty(

[WARNING] Try to use a single 'var' statement per scope.
);this.keyPressDelayHdlr=null;} ---> var  <--- form=this.getForm();var evt

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- evt=new DwtKeyEvent();evt.setFromDhtmlEvent

[WARNING] Try to use a single 'var' statement per scope.
false);returnfalse;}else{ ---> var  <--- action=new AjxTimedAction(this,this.handleKeyPressDelay

[WARNING] Try to use a single 'var' statement per scope.
setBehaviour(ev,true,false); ---> var  <--- currentTabId=XFormItem.getParentTabGroupId(this);if

[WARNING] Try to use a single 'var' statement per scope.
;}if(labelLocation==_INLINE_){ ---> var  <--- style=this.getLabelCssStyle();if(

[WARNING] Try to use a single 'var' statement per scope.
,label,"</div>");}else{ ---> var  <--- enableLabelFor=this.getInheritedProperty("enableLabelFor");if

[WARNING] Try to use a single 'var' statement per scope.
{var values=[];for( ---> var  <--- i=0;i<element.options.

[WARNING] Try to use a single 'var' statement per scope.
<options.length;i++){ ---> var  <--- choice=options[i];if(choice

[WARNING] Try to use a single 'var' statement per scope.
join(uniqueEndStr+uniqueStartStr)+uniqueEndStr; ---> var  <--- options=element.options;var anySelected=false

[WARNING] Try to use a single 'var' statement per scope.
uniqueEndStr;var options=element.options; ---> var  <--- anySelected=false;for(var i=0

[WARNING] Try to use a single 'var' statement per scope.
options;var anySelected=false;for( ---> var  <--- i=0;i<options.length;

[WARNING] Try to use a single 'var' statement per scope.
<options.length;i++){ ---> var  <--- isPresent=(newValue.indexOf(uniqueStartStr+options

[WARNING] Try to use a single 'var' statement per scope.
choices==null){return"";} ---> var  <--- html=new AjxBuffer();this.outputChoicesHTMLStart

[WARNING] Try to use a single 'var' statement per scope.
);this.outputChoicesHTMLStart(html); ---> var  <--- values=choices.values;var labels=choices

[WARNING] Try to use a single 'var' statement per scope.
);var values=choices.values; ---> var  <--- labels=choices.labels;var visible=choices

[WARNING] Try to use a single 'var' statement per scope.
values;var labels=choices.labels; ---> var  <--- visible=choices.visible;var choiceCssClass=this

[WARNING] Try to use a single 'var' statement per scope.
labels;var visible=choices.visible; ---> var  <--- choiceCssClass=this.getChoiceCssClass();for(

[WARNING] Try to use a single 'var' statement per scope.
=this.getChoiceCssClass();for( ---> var  <--- i=0;i<values.length;

[WARNING] Try to use a single 'var' statement per scope.
(container,isBlock);}else{ ---> var  <--- items=this.getItems();if(

[WARNING] Try to use a single 'var' statement per scope.
if(items!=null){for( ---> var  <--- i=0;i<items.length;

[WARNING] Try to use a single 'var' statement per scope.
=choices.call(this);} ---> var  <--- normalizedChoices;if(typeofchoices.getChoices=="function"

[WARNING] Try to use a single 'var' statement per scope.
==null){value="";} ---> var  <--- values=choices.values;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var values=choices.values;for( ---> var  <--- i=0;i<values.length;

[WARNING] Try to use a single 'var' statement per scope.
choices==null){returnlabel;} ---> var  <--- labels=choices.labels;var ix=-

[WARNING] Try to use a single 'var' statement per scope.
;}var labels=choices.labels; ---> var  <--- ix=-1;for(var i=

[WARNING] Try to use a single 'var' statement per scope.
;var ix=-1;for( ---> var  <--- i=0;i<labels.length;

[WARNING] Try to use a single 'var' statement per scope.
==null){return-1;} ---> var  <--- values=choices.values;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var values=choices.values;for( ---> var  <--- i=0;i<values.length;

[WARNING] Try to use a single 'var' statement per scope.
css=' class="'+css+'"';} ---> var  <--- style=(this.getCssStyle()||""

[WARNING] Try to use a single 'var' statement per scope.
this.getCssStyle()||""); ---> var  <--- width=this.getWidth();if(

[WARNING] Try to use a single 'var' statement per scope.
;}style+="width:"+width;} ---> var  <--- height=this.getHeight();if(

[WARNING] Try to use a single 'var' statement per scope.
;}style+="height:"+height;} ---> var  <--- overflow=this.getOverflow();if(

[WARNING] Try to use a single 'var' statement per scope.
+=";";}style+="white-space:nowrap";} ---> var  <--- valign=this.getValign();if(

[WARNING] Try to use a single 'var' statement per scope.
css=' class="'+css+'"';} ---> var  <--- style=(this.getLabelCssStyle(style)||

[WARNING] The variable style has already been declared in the same scope...
=' class="'+css+'"';}var  ---> style <--- =(this.getLabelCssStyle(style)||""

[WARNING] Try to use a single 'var' statement per scope.
css=' class="'+css+'"';} ---> var  <--- style=this.getTableCssStyle();if(

[WARNING] Try to use a single 'var' statement per scope.
==null){style="";} ---> var  <--- colSizes=this.getColSizes();if(

[WARNING] Try to use a single 'var' statement per scope.
+=";";}style+="table-layout:fixed";} ---> var  <--- width=this.getWidth();if(

[WARNING] Try to use a single 'var' statement per scope.
){style+=";width:"+width;} ---> var  <--- overflow=this.getOverflow();if(

[WARNING] Try to use a single 'var' statement per scope.
css=' class="'+css+'"';} ---> var  <--- style=this.getContainerCssStyle();if(

[WARNING] Try to use a single 'var' statement per scope.
==null){style="";} ---> var  <--- align=this.getAlign();if(

[WARNING] Try to use a single 'var' statement per scope.
;}style+="text-align:right";}}} ---> var  <--- valign=this.getValign();if(

[WARNING] Try to use a single 'var' statement per scope.
);dwtEv.setFromDhtmlEvent(event); ---> var  <--- shell=DwtShell.getShell(window);var 

[WARNING] Try to use a single 'var' statement per scope.
shell=DwtShell.getShell(window); ---> var  <--- tooltip=shell.getToolTip();tooltip.

[WARNING] Try to use a single 'var' statement per scope.
shell=DwtShell.getShell(window); ---> var  <--- tooltip=shell.getToolTip();tooltip.

[WARNING] Try to use a single 'var' statement per scope.
var value=this.getValue(); ---> var  <--- method=this.getDisplayValueMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
.call(this,value);} ---> var  <--- clickMethod=this.getClickHandlerHTML();var htmlWithEvent

[WARNING] Try to use a single 'var' statement per scope.
var clickMethod=this.getClickHandlerHTML(); ---> var  <--- htmlWithEvent=null;if(clickMethod!=null&&

[WARNING] Try to use a single 'var' statement per scope.
getElement();if(el){ ---> var  <--- clickMethod=this.getClickHandlerHTML();var htmlWithEvent

[WARNING] Try to use a single 'var' statement per scope.
var clickMethod=this.getClickHandlerHTML(); ---> var  <--- htmlWithEvent=null;if(clickMethod!=null&&

[WARNING] Try to use a single 'var' statement per scope.
.constructor!=XFormChoices){return;} ---> var  <--- listener=new AjxListener(this,this.dirtyDisplay

[WARNING] Try to use a single 'var' statement per scope.
){var inputType=this._inputType; ---> var  <--- value=this.getValue();var modelItem

[WARNING] Try to use a single 'var' statement per scope.
var value=this.getValue(); ---> var  <--- modelItem=this.getModelItem();var inputHelp

[WARNING] Try to use a single 'var' statement per scope.
var modelItem=this.getModelItem(); ---> var  <--- inputHelp=this.getInheritedProperty("inputHelp");html

[WARNING] Try to use a single 'var' statement per scope.
,itemId=this.getId(); ---> var  <--- onClickAction="";var onClickFunc=this.getInheritedProperty

[WARNING] Try to use a single 'var' statement per scope.
getId();var onClickAction=""; ---> var  <--- onClickFunc=this.getInheritedProperty("onClick");onClickAction

[WARNING] Try to use a single 'var' statement per scope.
,itemId=this.getId(); ---> var  <--- onMouseoutAction="";var onMouseoutFunc=this.getInheritedProperty

[WARNING] Try to use a single 'var' statement per scope.
getId();var onMouseoutAction=""; ---> var  <--- onMouseoutFunc=this.getInheritedProperty("onMouseout");onMouseoutAction

[WARNING] Try to use a single 'var' statement per scope.
=this.getId()+"_datalist"; ---> var  <--- oldDataList=Dwt.getElement(dataListId);if

[WARNING] Try to use a single 'var' statement per scope.
.parentNode.removeChild(oldDataList);} ---> var  <--- element=this.getElement();element.

[WARNING] Try to use a single 'var' statement per scope.
element.setAttribute("list",dataListId); ---> var  <--- dataList=document.createElement("datalist");dataList

[WARNING] Try to use a single 'var' statement per scope.
;dataList.id=dataListId;for( ---> var  <--- i=0;i<list.length;

[WARNING] Try to use a single 'var' statement per scope.
<list.length;i++){ ---> var  <--- option=document.createElement("option");option

[WARNING] Try to use a single 'var' statement per scope.
element.parentNode.appendChild(dataList); ---> var  <--- onChangeMethod=this.getOnChangeMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
trueValue="'"+trueValue+"'";} ---> var  <--- falseValue=this.getFalseValue();if(

[WARNING] Try to use a single 'var' statement per scope.
this.getFocusHandlerHTML(),checked); ---> var  <--- groupname=this.getInheritedProperty("groupname");if

[WARNING] Try to use a single 'var' statement per scope.
"___labelValue"));if(labelEl){ ---> var  <--- labelRef=this.getInheritedProperty("labelRef");if

[WARNING] Try to use a single 'var' statement per scope.
(labelRef==null){return;} ---> var  <--- label=this.getInstanceValue(labelRef);labelEl

[WARNING] Try to use a single 'var' statement per scope.
this.getFocusHandlerHTML(),checked); ---> var  <--- groupname=this.getInheritedProperty("groupname");if

[WARNING] Try to use a single 'var' statement per scope.
(labelRef==null){return;} ---> var  <--- label=this.getInstanceValue(labelRef);if

[WARNING] Try to use a single 'var' statement per scope.
==""){label="&nbsp;";} ---> var  <--- accessKey=this.getInheritedProperty("labelValue");if

[WARNING] Try to use a single 'var' statement per scope.
);if(labelLocation==_INLINE_){ ---> var  <--- style=this.getLabelCssStyle();if(

[WARNING] Try to use a single 'var' statement per scope.
{var output="";}else{ ---> var  <--- path=this.getSrcPath();if(

[WARNING] Try to use a single 'var' statement per scope.
){src=path+src;} ---> var  <--- output=AjxBuffer.concat('<img id="',this.

[WARNING] The variable output has already been declared in the same scope...
{src=path+src;}var  ---> output <--- =AjxBuffer.concat('<img id="',this.getId

[WARNING] Try to use a single 'var' statement per scope.
){output="";}else{ ---> var  <--- path=this.getSrcPath();if(

[WARNING] Try to use a single 'var' statement per scope.
){src=path+src;} ---> var  <--- style=this.getCssStyle();output=

[WARNING] Try to use a single 'var' statement per scope.
){output="";}else{ ---> var  <--- path=this.getSrcPath();if(

[WARNING] Try to use a single 'var' statement per scope.
){src=path+src;} ---> var  <--- style=this.getCssStyle();style=

[WARNING] Try to use a single 'var' statement per scope.
();style=style||""; ---> var  <--- styleStr="style='position:relative;"+style+"'";if(

[WARNING] Try to use a single 'var' statement per scope.
.constructor!=XFormChoices){return;} ---> var  <--- listener=new AjxListener(this,this.dirtyDisplay

[WARNING] Try to use a single 'var' statement per scope.
);if(this.items){ ---> var  <--- cnt=this.items.length;for(

[WARNING] Try to use a single 'var' statement per scope.
=this.items.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
function(){var isVisible=true; ---> var  <--- parentItem=this.getParentItem();if(

[WARNING] Try to use a single 'var' statement per scope.
();}if(isVisible){ ---> var  <--- myVisibilityChecks=this.getInheritedProperty("visibilityChecks");if

[WARNING] Try to use a single 'var' statement per scope.
if(myVisibilityChecks&&myVisibilityChecks instanceof Array){ ---> var  <--- cnt=myVisibilityChecks.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=myVisibilityChecks.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
(myVisibilityChecks[i] instanceof Array){ ---> var  <--- func=myVisibilityChecks[i].shift()

[WARNING] Try to use a single 'var' statement per scope.
myVisibilityChecks[i])=="string"){ ---> var  <--- instance=this.getInstance();isVisible=

[WARNING] Using 'eval' is not recommended. Moreover, using 'eval' reduces the level of compression!
=this.getInstance();isVisible= ---> eval <--- (myVisibilityChecks[i]);if(!

[WARNING] Try to use a single 'var' statement per scope.
;}}}}}}}} ---> var  <--- reRunRefresh=false;if(isVisible){if

[WARNING] Try to use a single 'var' statement per scope.
;}if(isVisible){for( ---> var  <--- itemId in this.activeChildren){if(this

[WARNING] Try to use a single 'var' statement per scope.
.activeChildren[itemId]===true){ ---> var  <--- item=this.getForm().getItemById(

[WARNING] Try to use a single 'var' statement per scope.
item&&this.getInstance()){ ---> var  <--- updateMethod=item.getUpdateVisibilityMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
var el=this.getElement(); ---> var  <--- sourceValue=this.getInheritedProperty("sourceValue");if

[WARNING] Try to use a single 'var' statement per scope.
sourceValue=this.getInheritedProperty("sourceValue"); ---> var  <--- instanceValue=this.getInstanceValue();if(

[WARNING] Try to use a single 'var' statement per scope.
this);this.signUpForEvents(); ---> var  <--- labels=choices.labels;var values=choices

[WARNING] Try to use a single 'var' statement per scope.
);var labels=choices.labels; ---> var  <--- values=choices.values;this.items=

[WARNING] Try to use a single 'var' statement per scope.
values;this.items=[]; ---> var  <--- currentItem;var labelUpdateMethod=this.getLabelUpdateMethod()

[WARNING] Try to use a single 'var' statement per scope.
.items=[];var currentItem; ---> var  <--- labelUpdateMethod=this.getLabelUpdateMethod();var labelVisibility

[WARNING] Try to use a single 'var' statement per scope.
var labelUpdateMethod=this.getLabelUpdateMethod(); ---> var  <--- labelVisibility=this.getInheritedProperty("labelVisibility");var 

[WARNING] Try to use a single 'var' statement per scope.
labelVisibility=this.getInheritedProperty("labelVisibility"); ---> var  <--- labelOnClickMethod=this.getLabelClickMethod();for(

[WARNING] Try to use a single 'var' statement per scope.
=this.getLabelClickMethod();for( ---> var  <--- i=0;i<labels.length;

[WARNING] Try to use a single 'var' statement per scope.
this.items[1].items; ---> var  <--- choices=this.getInheritedProperty("contentChoices");if

[WARNING] Try to use a single 'var' statement per scope.
].numCols=1;}for( ---> var  <--- i=0;i<choices.length;

[WARNING] Try to use a single 'var' statement per scope.
<choices.length;i++){ ---> var  <--- currentItem={type:_OUTPUT_,label:choices

[WARNING] Try to use a single 'var' statement per scope.
.getParentItem().getParentItem(); ---> var  <--- contentContainer=homeItem.items[1];if

[WARNING] Try to use a single 'var' statement per scope.
headerLabel=this.getInheritedProperty("headerLabel"); ---> var  <--- headerCss=this.getInheritedProperty("headCss");var 

[WARNING] Try to use a single 'var' statement per scope.
headerCss=this.getInheritedProperty("headCss"); ---> var  <--- headerItems={type:_COMPOSITE_,numCols:3

[WARNING] Try to use a single 'var' statement per scope.
bodyCss=this.getInheritedProperty("bodyCss"); ---> var  <--- contentItems={type:_GROUP_,items:[

[WARNING] Try to use a single 'var' statement per scope.
gridLabelCss=this.getInheritedProperty("gridLabelCss"); ---> var  <--- oldItems=this.getItems();this.

[WARNING] Try to use a single 'var' statement per scope.
){if(oldItems){for( ---> var  <--- i=0;i<oldItems.length;

[WARNING] Try to use a single 'var' statement per scope.
(oldItems[i].type){ ---> var  <--- form=this.getForm();var constructor

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- constructor=XFormItemFactory.getItemTypeConstructor(oldItems[i]

[WARNING] Try to use a single 'var' statement per scope.
var headerItem=this.getParentItem(); ---> var  <--- collapsedItem=headerItem.getParentItem();var headerContainer

[WARNING] Try to use a single 'var' statement per scope.
var collapsedItem=headerItem.getParentItem(); ---> var  <--- headerContainer=headerItem.items[2];var 

[WARNING] Try to use a single 'var' statement per scope.
headerContainer=headerItem.items[2]; ---> var  <--- contentContainer=collapsedItem.items[1];var 

[WARNING] Try to use a single 'var' statement per scope.
contentContainer=collapsedItem.items[1]; ---> var  <--- displayLabelItem=collapsedItem.getInheritedProperty("displayLabelItem");if

[WARNING] Try to use a single 'var' statement per scope.
headerLabel=this.getInheritedProperty("headerLabel"); ---> var  <--- headerLabelWidth=this.getInheritedProperty("headerLabelWidth");var 

[WARNING] Try to use a single 'var' statement per scope.
headerLabelWidth=this.getInheritedProperty("headerLabelWidth"); ---> var  <--- headerCss=this.getInheritedProperty("headCss");var 

[WARNING] Try to use a single 'var' statement per scope.
headerCss=this.getInheritedProperty("headCss"); ---> var  <--- headItems=this.getInheritedProperty("headerItems")||[

[WARNING] Try to use a single 'var' statement per scope.
.getInheritedProperty("headerItems")||[]; ---> var  <--- headerItems={type:_COMPOSITE_,numCols:3

[WARNING] Try to use a single 'var' statement per scope.
colsize=this.getInheritedProperty("colSizes"); ---> var  <--- numcols=this.getInheritedProperty("numCols");var 

[WARNING] Try to use a single 'var' statement per scope.
numcols=this.getInheritedProperty("numCols"); ---> var  <--- contentCss=this.getInheritedProperty("contentCss");var 

[WARNING] Try to use a single 'var' statement per scope.
contentCss=this.getInheritedProperty("contentCss"); ---> var  <--- tableCssClass=this.getInheritedProperty("contentTableCssClass");var 

[WARNING] Try to use a single 'var' statement per scope.
tableCssClass=this.getInheritedProperty("contentTableCssClass"); ---> var  <--- contentItems={type:_GROUP_,items:[

[WARNING] Try to use a single 'var' statement per scope.
cssClass:contentCss,tableCssClass:tableCssClass}; ---> var  <--- ref=this.getInheritedProperty("ref");if

[WARNING] Try to use a single 'var' statement per scope.
){contentItems.ref=ref;} ---> var  <--- content=this.getInheritedProperty("contentItems");if

[WARNING] Try to use a single 'var' statement per scope.
display=this.getInheritedProperty("defaultDisplay"); ---> var  <--- displayLabelItem=this.getInheritedProperty("displayLabelItem");if

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- element=this.getElement();if(

[WARNING] Try to use a single 'var' statement per scope.
if(!element){return;} ---> var  <--- masterId=this.getId();if(

[WARNING] Try to use a single 'var' statement per scope.
.cacheInheritedMethod("getCustomHeight","$getCustomHeight")){ ---> var  <--- height=this.cacheInheritedMethod("getCustomHeight","$getCustomHeight")

[WARNING] Try to use a single 'var' statement per scope.
,"$getCustomHeight").call(this); ---> var  <--- width=this.cacheInheritedMethod("getCustomWidth","$getCustomWidth")

[WARNING] Try to use a single 'var' statement per scope.
setSize(element,width,height); ---> var  <--- container=(form.parent instanceof DwtControl)?

[WARNING] Try to use a single 'var' statement per scope.
.cacheInheritedMethod("getCustomPaddingStyle","$getCustomPaddingStyle")){ ---> var  <--- paddingStyle=this.cacheInheritedMethod("getCustomPaddingStyle","$getCustomPaddingStyle")

[WARNING] Try to use a single 'var' statement per scope.
}}if(AjxEnv.isIE){ ---> var  <--- tempDiv=this.createElement("temp",null,

[WARNING] Try to use a single 'var' statement per scope.
);tempDiv.display="none";} ---> var  <--- html=new AjxBuffer();if(this

[WARNING] Try to use a single 'var' statement per scope.
.outputHTMLStart(html,0);} ---> var  <--- drawTable=(this.getUseParentTable()==false

[WARNING] Try to use a single 'var' statement per scope.
==false);if(drawTable){ ---> var  <--- colSizes=this.getColSizes();var cellspacing

[WARNING] Try to use a single 'var' statement per scope.
var colSizes=this.getColSizes(); ---> var  <--- cellspacing=this.getInheritedProperty("cellspacing");var 

[WARNING] Try to use a single 'var' statement per scope.
cellspacing=this.getInheritedProperty("cellspacing"); ---> var  <--- cellpadding=this.getInheritedProperty("cellpadding");html

[WARNING] Try to use a single 'var' statement per scope.
html.append(" <colgroup>");for( ---> var  <--- i=0;i<colSizes.length;

[WARNING] Try to use a single 'var' statement per scope.
<colSizes.length;i++){ ---> var  <--- size=colSizes[i];if(size

[WARNING] Try to use a single 'var' statement per scope.
function(){var isCurrent=false; ---> var  <--- caseKey=this.getInheritedProperty("caseKey");if

[WARNING] Try to use a single 'var' statement per scope.
!AjxUtil.isEmpty(caseKey)){ ---> var  <--- caseVarRef=this.getInheritedProperty("caseVarRef");var 

[WARNING] Try to use a single 'var' statement per scope.
caseVarRef=this.getInheritedProperty("caseVarRef"); ---> var  <--- currentKey=this.getInstanceValue(caseVarRef);isCurrent

[WARNING] Try to use a single 'var' statement per scope.
outputElementDivStart(html);}}for( ---> var  <--- itemNum=0;itemNum<items.length;

[WARNING] Try to use a single 'var' statement per scope.
<items.length;itemNum++){ ---> var  <--- item=items[itemNum];var isNestingItem=

[WARNING] Try to use a single 'var' statement per scope.
{var item=items[itemNum]; ---> var  <--- isNestingItem=(item.getItems()!=null

[WARNING] Try to use a single 'var' statement per scope.
item.getItems()!=null); ---> var  <--- itemUsesParentTable=(item.getUseParentTable()!=false

[WARNING] Try to use a single 'var' statement per scope.
item.getUseParentTable()!=false); ---> var  <--- writeElementDiv=item.getWriteElementDiv();var outputMethod

[WARNING] Try to use a single 'var' statement per scope.
var writeElementDiv=item.getWriteElementDiv(); ---> var  <--- outputMethod=item.getOutputHTMLMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
);}item.signUpForEvents(); ---> var  <--- itemUpdateMethod=item.getUpdateElementMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
getUpdateElementMethod();if(itemUpdateMethod){ ---> var  <--- itemRefpath=item.getRefPath();if(

[WARNING] Try to use a single 'var' statement per scope.
getRefPath();if(itemRefpath){ ---> var  <--- instance=this.getInstance();if(

[WARNING] Try to use a single 'var' statement per scope.
this.removeButton.label=label;} ---> var  <--- width=this.getInheritedProperty("removeButtonWidth");if

[WARNING] Try to use a single 'var' statement per scope.
this.removeButton.width=width;} ---> var  <--- cssStyle=this.getInheritedProperty("removeButtonCSSStyle");if

[WARNING] Try to use a single 'var' statement per scope.
()],forceUpdate:true}; ---> var  <--- label=this.getInheritedProperty("addButtonLabel");if

[WARNING] Try to use a single 'var' statement per scope.
this.addButton.label=label;} ---> var  <--- width=this.getInheritedProperty("addButtonWidth");if

[WARNING] Try to use a single 'var' statement per scope.
this.addButton.width=width;} ---> var  <--- cssStyle=this.getInheritedProperty("addButtonCSSStyle");if

[WARNING] Try to use a single 'var' statement per scope.
&&items[0].items){ ---> var  <--- group=items[0];}else{

[WARNING] Try to use a single 'var' statement per scope.
=items[0];}else{ ---> var  <--- group={ref:this.getRef()

[WARNING] The variable group has already been declared in the same scope...
items[0];}else{var  ---> group <--- ={ref:this.getRef(),

[WARNING] Try to use a single 'var' statement per scope.
if(this.getShowRemoveButton()){ ---> var  <--- button=this.getRemoveButton();group.

[WARNING] Try to use a single 'var' statement per scope.
if(this.getShowAddButton()){ ---> var  <--- button=this.getAddButton();var showAddOnNextRow

[WARNING] The variable button has already been declared in the same scope...
(this.getShowAddButton()){var  ---> button <--- =this.getAddButton();var showAddOnNextRow=

[WARNING] Try to use a single 'var' statement per scope.
var button=this.getAddButton(); ---> var  <--- showAddOnNextRow=this.getInheritedProperty("showAddOnNextRow");group

[WARNING] Try to use a single 'var' statement per scope.
){var originalGroup=this.__originalItems; ---> var  <--- numCols=this.getNumCols();var newItems

[WARNING] Try to use a single 'var' statement per scope.
var numCols=this.getNumCols(); ---> var  <--- newItems=[];for(var i=

[WARNING] Try to use a single 'var' statement per scope.
;var newItems=[];for( ---> var  <--- i=0;i<numCols;i++

[WARNING] Try to use a single 'var' statement per scope.
;i<numCols;i++){ ---> var  <--- instanceNum=this.items.length;originalGroup.

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- element=this.getElement();if(

[WARNING] Try to use a single 'var' statement per scope.
""){value=[];} ---> var  <--- itemsToShow=Math.max(value.length,

[WARNING] Try to use a single 'var' statement per scope.
length,this.getNumberToShow()); ---> var  <--- slotsPresent=this.items.length;var masterId

[WARNING] Try to use a single 'var' statement per scope.
var slotsPresent=this.items.length; ---> var  <--- masterId=this.getId();if(

[WARNING] Try to use a single 'var' statement per scope.
);if(itemsToShow>slotsPresent){ ---> var  <--- missingElementCount=(itemsToShow-slotsPresent);var table

[WARNING] Try to use a single 'var' statement per scope.
var missingElementCount=(itemsToShow-slotsPresent); ---> var  <--- table=element.getElementsByTagName("table")[0

[WARNING] Try to use a single 'var' statement per scope.
.getElementsByTagName("table")[0]; ---> var  <--- tbody=element.getElementsByTagName("tbody")[0

[WARNING] Try to use a single 'var' statement per scope.
.getElementsByTagName("tbody")[0]; ---> var  <--- tempDiv;if(AjxEnv.isIE){tempDiv

[WARNING] Try to use a single 'var' statement per scope.
this.items.length<itemsToShow){ ---> var  <--- newItems=this.makeRepeatInstance(this);var 

[WARNING] Try to use a single 'var' statement per scope.
newItems=this.makeRepeatInstance(this); ---> var  <--- html=new AjxBuffer();form.outputItemList

[WARNING] Try to use a single 'var' statement per scope.
+html.toString()+"</table>"; ---> var  <--- rows=tempDiv.getElementsByTagName("table")[0

[WARNING] Try to use a single 'var' statement per scope.
)[0].rows;for( ---> var  <--- r=0;r<rows.length;

[WARNING] Try to use a single 'var' statement per scope.
[r]);}}else{ ---> var  <--- row=table.insertRow(-1);

[WARNING] Try to use a single 'var' statement per scope.
);row.innerHTML=html;} ---> var  <--- cnt=newItems.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=newItems.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- updateMethod=newItems[i].getUpdateVisibilityMethod()

[WARNING] Try to use a single 'var' statement per scope.
,instanceNum,form);}else{ ---> var  <--- path=this.getRefPath();this.

[WARNING] Try to use a single 'var' statement per scope.
items[instanceNum].clearError(); ---> var  <--- event=new DwtXFormsEvent(form,this,this

[WARNING] Try to use a single 'var' statement per scope.
headerLabels=this.getInheritedProperty("headerLabels"); ---> var  <--- contentItems=this.getInheritedProperty("contentItems");this

[WARNING] Try to use a single 'var' statement per scope.
headerLabels.length==contentItems.length){ ---> var  <--- firstlabel=1;var isLast;for(var 

[WARNING] Try to use a single 'var' statement per scope.
.length){var firstlabel=1; ---> var  <--- isLast;for(var i=0;i

[WARNING] Try to use a single 'var' statement per scope.
firstlabel=1;var isLast;for( ---> var  <--- i=0;i<headerLabels.length;

[WARNING] Try to use a single 'var' statement per scope.
;}else{isLast=true;} ---> var  <--- result=this.constructSingleGroup(headerLabels[i]

[WARNING] Try to use a single 'var' statement per scope.
if(this.numCols>1){ ---> var  <--- colSize=Math.floor(100/(this

[WARNING] Try to use a single 'var' statement per scope.
100/(this.numCols)); ---> var  <--- lastCol=100-colSize*(this.numCols

[WARNING] Try to use a single 'var' statement per scope.
*(this.numCols-1); ---> var  <--- colArr=[];for(var i=

[WARNING] Try to use a single 'var' statement per scope.
;var colArr=[];for( ---> var  <--- i=0;i<this.numCols-

[WARNING] The variable i has already been declared in the same scope...
var colArr=[];for(var  ---> i <--- =0;i<this.numCols-1

[WARNING] Try to use a single 'var' statement per scope.
:_TOP_,items:[]}; ---> var  <--- labelMessage=(index)+"  "+headerLabel;

[WARNING] Try to use a single 'var' statement per scope.
=(index)+"  "+headerLabel; ---> var  <--- headerItems;if(isLast){headerItems={

[WARNING] Try to use a single 'var' statement per scope.
currentGroup.items.push(headerItems); ---> var  <--- singleContentItem;var isAdd=false;var labelNumber=

[WARNING] Try to use a single 'var' statement per scope.
.push(headerItems);var singleContentItem; ---> var  <--- isAdd=false;var labelNumber=1;var 

[WARNING] Try to use a single 'var' statement per scope.
;var singleContentItem;var isAdd=false; ---> var  <--- labelNumber=1;var currentLabel;for(var 

[WARNING] Try to use a single 'var' statement per scope.
isAdd=false;var labelNumber=1; ---> var  <--- currentLabel;for(var i=0;i

[WARNING] Try to use a single 'var' statement per scope.
labelNumber=1;var currentLabel;for( ---> var  <--- i=0;i<contentItem.length;

[WARNING] Try to use a single 'var' statement per scope.
==12){hours=0;} ---> var  <--- wasPM=(currentDate.getHours()>11

[WARNING] Try to use a single 'var' statement per scope.
.__dummyDate.setHours(hours);} ---> var  <--- parentItem=this.getParentItem();var elementChangedMethod

[WARNING] Try to use a single 'var' statement per scope.
var parentItem=this.getParentItem(); ---> var  <--- elementChangedMethod=parentItem.getElementChangedMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
.__dummyDate.setMinutes(minutes);} ---> var  <--- parentItem=this.getParentItem();var elementChangedMethod

[WARNING] Try to use a single 'var' statement per scope.
var parentItem=this.getParentItem(); ---> var  <--- elementChangedMethod=parentItem.getElementChangedMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
=(ampmStr==I18nMsg.periodPm); ---> var  <--- hours=currentDate.getHours()%12;

[WARNING] Try to use a single 'var' statement per scope.
(isPM?12:0)); ---> var  <--- parentItem=this.getParentItem();var elementChangedMethod

[WARNING] Try to use a single 'var' statement per scope.
var parentItem=this.getParentItem(); ---> var  <--- elementChangedMethod=parentItem.getElementChangedMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
timeItem){var items=[]; ---> var  <--- pattern=/{(\d+),\s*(date|time)}/;var index=0;while

[WARNING] Try to use a single 'var' statement per scope.
=[];var pattern=/{(\d+),\s*(date|time)}/; ---> var  <--- index=0;while((index=format

[WARNING] Try to use a single 'var' statement per scope.
){if(index>0){ ---> var  <--- item={type:_OUTPUT_,value:format

[WARNING] Try to use a single 'var' statement per scope.
=format.substring(index);} ---> var  <--- result=pattern.exec(format);items

[WARNING] Try to use a single 'var' statement per scope.
if(format.length>0){ ---> var  <--- item={type:_OUTPUT_,value:format

[WARNING] The variable item has already been declared in the same scope...
(format.length>0){var  ---> item <--- ={type:_OUTPUT_,value:format}

[WARNING] Try to use a single 'var' statement per scope.
.__selOptions;}var selectOptions=null; ---> var  <--- choices=this.getChoices();if(

[WARNING] Try to use a single 'var' statement per scope.
);if(choices!=null){ ---> var  <--- selectOptions=new Array(choices.length);

[WARNING] The variable selectOptions has already been declared in the same scope...
;if(choices!=null){var  ---> selectOptions <--- =new Array(choices.length);for

[WARNING] Try to use a single 'var' statement per scope.
Array(choices.length);for( ---> var  <--- i=0;i<choices.length;

[WARNING] Try to use a single 'var' statement per scope.
<choices.length;i++){ ---> var  <--- choice=choices[i];var choiceValue=

[WARNING] Try to use a single 'var' statement per scope.
{var choice=choices[i]; ---> var  <--- choiceValue=(choice instanceof Object?choice.value

[WARNING] Try to use a single 'var' statement per scope.
Object?choice.value:choice); ---> var  <--- choiceLabel=(choice instanceof Object?choice.label

[WARNING] Try to use a single 'var' statement per scope.
);if(style!=null){ ---> var  <--- styleArr=style.split(";");var 

[WARNING] Try to use a single 'var' statement per scope.
styleArr=style.split(";"); ---> var  <--- el=this.widget.getHtmlElement();

[WARNING] Try to use a single 'var' statement per scope.
=this.widget.getHtmlElement(); ---> var  <--- kp;for(var i=0;i

[WARNING] Try to use a single 'var' statement per scope.
getHtmlElement();var kp;for( ---> var  <--- i=0;i<styleArr.length;

[WARNING] Try to use a single 'var' statement per scope.
if(kp.length>0){ ---> var  <--- key=kp[0];if(key

[WARNING] Try to use a single 'var' statement per scope.
.isIE)?"styleFloat":"cssFloat";} ---> var  <--- val=kp[1];if(val

[WARNING] Try to use a single 'var' statement per scope.
),this.getCssClass()); ---> var  <--- height=this.getHeight();var width

[WARNING] Try to use a single 'var' statement per scope.
var height=this.getHeight(); ---> var  <--- width=this.getWidth();var el

[WARNING] Try to use a single 'var' statement per scope.
var width=this.getWidth(); ---> var  <--- el=null;if(width!=null||

[WARNING] Try to use a single 'var' statement per scope.
;}}this._addCssStylesToDwtWidget(); ---> var  <--- icon=this.getInheritedProperty("icon");if

[WARNING] Try to use a single 'var' statement per scope.
{widget.setImage(icon);} ---> var  <--- isToolTip=false;var toolTipContent=this.getInheritedProperty

[WARNING] Try to use a single 'var' statement per scope.
icon);}var isToolTip=false; ---> var  <--- toolTipContent=this.getInheritedProperty("toolTipContent");if

[WARNING] Try to use a single 'var' statement per scope.
(toolTipContent);isToolTip=true;} ---> var  <--- labelContent=this.getLabel();try{

[WARNING] Try to use a single 'var' statement per scope.
=this.getLabel();try{ ---> var  <--- size=Dwt.getSize(this.getContainer(

[WARNING] Try to use a single 'var' statement per scope.
());if(labelContent){ ---> var  <--- totalCharWidth=AjxStringUtil.getWidth(labelContent);var 

[WARNING] Try to use a single 'var' statement per scope.
totalCharWidth=AjxStringUtil.getWidth(labelContent); ---> var  <--- textLength;if(icon){textLength=size

[WARNING] Try to use a single 'var' statement per scope.
{widget.setToolTipContent(labelContent);} ---> var  <--- totalNumber=labelContent.length;var textLength=textLength

[WARNING] Try to use a single 'var' statement per scope.
;}var totalNumber=labelContent.length; ---> var  <--- textLength=textLength-AjxStringUtil.getWidth("...")

[WARNING] The variable textLength has already been declared in the same scope...
}var totalNumber=labelContent.length;var  ---> textLength <--- =textLength-AjxStringUtil.getWidth("...");

[WARNING] Try to use a single 'var' statement per scope.
textLength-AjxStringUtil.getWidth("..."); ---> var  <--- maxNumberOfLetters=Math.floor(textLength*totalNumber/

[WARNING] Try to use a single 'var' statement per scope.
}el=widget.getHtmlElement(); ---> var  <--- tableEl=el.firstChild;var isAutoPadding=this

[WARNING] Try to use a single 'var' statement per scope.
);var tableEl=el.firstChild; ---> var  <--- isAutoPadding=this.getInheritedProperty("autoPadding");if

[WARNING] Try to use a single 'var' statement per scope.
{}widget.setText(labelContent); ---> var  <--- onActivateMethod=this.getOnActivateMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
);if(onActivateMethod!=null){ ---> var  <--- ls=new AjxListener(this,onActivateMethod);

[WARNING] Try to use a single 'var' statement per scope.
getDwtSelectItemChoices(this.getChoices()); ---> var  <--- widget=this.widget=new DwtSelect(this

[WARNING] Try to use a single 'var' statement per scope.
this.getForm(),choices); ---> var  <--- height=this.getHeight();var width

[WARNING] Try to use a single 'var' statement per scope.
var height=this.getHeight(); ---> var  <--- width=this.getWidth();if(

[WARNING] Try to use a single 'var' statement per scope.
width!=null||height!=null){ ---> var  <--- el=widget.getHtmlElement();if(

[WARNING] Try to use a single 'var' statement per scope.
;}}this._addCssStylesToDwtWidget(); ---> var  <--- onChangeFunc=new Function("event","var widget = event._args.selectObj;\rvalue = event._args.newValue; "+this

[WARNING] Try to use a single 'var' statement per scope.
"var widget = event._args.selectObj;\rvalue = event._args.newValue; "+this.getExternalChangeHandler()); ---> var  <--- ls=new AjxListener(this.getForm()

[WARNING] Try to use a single 'var' statement per scope.
true,noFillLabel:ZaMsg.bt_reset}; ---> var  <--- widget=new DwtButtonColorPicker(params);widget.

[WARNING] Try to use a single 'var' statement per scope.
widget.setActionTiming(DwtButton.ACTION_MOUSEDOWN); ---> var  <--- buttonImage=this.getInheritedProperty("buttonImage")||"FontColor"

[WARNING] Try to use a single 'var' statement per scope.
){var value=event.detail; ---> var  <--- elementChanged=this.getElementChangedMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
.getInstanceValue(),event);} ---> var  <--- onChangeFunc=this.getOnChangeMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
firstDayOfWeek=this.getInheritedProperty("firstDayOfWeek"); ---> var  <--- widget=new DwtButton(this.getForm()

[WARNING] Try to use a single 'var' statement per scope.
widget.setActionTiming(DwtButton.ACTION_MOUSEDOWN); ---> var  <--- menu=this.menu=new DwtMenu(widget

[WARNING] Try to use a single 'var' statement per scope.
);menu.setAssociatedObj(widget); ---> var  <--- cal=new DwtCalendar({parent:menu,

[WARNING] Try to use a single 'var' statement per scope.
){var value=event.detail; ---> var  <--- cal=event.item;var elemChanged=this

[WARNING] Try to use a single 'var' statement per scope.
detail;var cal=event.item; ---> var  <--- elemChanged=this.getElementChangedMethod();elemChanged.

[WARNING] Try to use a single 'var' statement per scope.
=this.widget.getValue(); ---> var  <--- elemChanged=this.getElementChangedMethod();elemChanged.

[WARNING] Try to use a single 'var' statement per scope.
headerList=this.getInheritedProperty("headerList"); ---> var  <--- listClass=this.getInheritedProperty("widgetClass");var 

[WARNING] Try to use a single 'var' statement per scope.
listClass=this.getInheritedProperty("widgetClass"); ---> var  <--- hideHeader=this.getInheritedProperty("hideHeader");var 

[WARNING] Try to use a single 'var' statement per scope.
hideHeader=this.getInheritedProperty("hideHeader"); ---> var  <--- widget=new listClass(this.getForm()

[WARNING] Try to use a single 'var' statement per scope.
true)?null:headerList)); ---> var  <--- emptyText=this.getInheritedProperty("emptyText");if

[WARNING] Try to use a single 'var' statement per scope.
{widget._headerList=headerList;}} ---> var  <--- multiselect=this.getInheritedProperty("multiselect");if

[WARNING] Try to use a single 'var' statement per scope.
.cacheInheritedMethod("getCustomWidth","$getCustomWidth")){ ---> var  <--- height=this.cacheInheritedMethod("getCustomHeight","$getCustomHeight")

[WARNING] Try to use a single 'var' statement per scope.
,"$getCustomHeight").call(this); ---> var  <--- width=this.cacheInheritedMethod("getCustomWidth","$getCustomWidth")

[WARNING] Try to use a single 'var' statement per scope.
width,height);}}else{ ---> var  <--- width=this.getWidth();var height

[WARNING] The variable width has already been declared in the same scope...
,height);}}else{var  ---> width <--- =this.getWidth();var height=

[WARNING] Try to use a single 'var' statement per scope.
var width=this.getWidth(); ---> var  <--- height=this.getHeight();if(

[WARNING] The variable height has already been declared in the same scope...
width=this.getWidth();var  ---> height <--- =this.getHeight();if(width

[WARNING] Try to use a single 'var' statement per scope.
widget.setListDivHeight(height);}} ---> var  <--- selMethod=this.getOnSelectionMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
this,selMethod));}else{ ---> var  <--- localLs=new AjxListener(this,this._handleSelection

[WARNING] Try to use a single 'var' statement per scope.
;widget.addSelectionListener(localLs);} ---> var  <--- createPopupMenumethod=this.cacheInheritedMethod("createPopupMenu","$createPopupMenu",

[WARNING] Try to use a single 'var' statement per scope.
.call(this,widget);} ---> var  <--- form=this.getForm();var container

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- container=(form.parent instanceof DwtControl)?

[WARNING] Try to use a single 'var' statement per scope.
,"$getCustomHeight").call(this); ---> var  <--- width=this.cacheInheritedMethod("getCustomWidth","$getCustomWidth")

[WARNING] Try to use a single 'var' statement per scope.
var modelItem=this.getModelItem(); ---> var  <--- event=new DwtXModelEvent(this.getInstance()

[WARNING] The variable event has already been declared in the same scope...
modelItem=this.getModelItem();var  ---> event <--- =new DwtXModelEvent(this.getInstance(),

[WARNING] Try to use a single 'var' statement per scope.
){isChanged=true;}else{ ---> var  <--- rows=[];var existingRows=[]

[WARNING] Try to use a single 'var' statement per scope.
}else{var rows=[]; ---> var  <--- existingRows=[];for(var i=

[WARNING] Try to use a single 'var' statement per scope.
;var existingRows=[];for( ---> var  <--- i=0;i<itemArray.length;

[WARNING] Try to use a single 'var' statement per scope.
[i] instanceof Object){for( ---> var  <--- p in itemArray[i]){rows.

[WARNING] Try to use a single 'var' statement per scope.
[i] instanceof Object){for( ---> var  <--- p1 in existingArr[i]){existingRows.

[WARNING] Try to use a single 'var' statement per scope.
=this.widget.getList(); ---> var  <--- existingArr=new Array();var tmpArr=

[WARNING] Try to use a single 'var' statement per scope.
;var existingArr=new Array(); ---> var  <--- tmpArr=new Array();if(list

[WARNING] Try to use a single 'var' statement per scope.
;}tmpArr=new Array(); ---> var  <--- defaultColumnSort=this.getInheritedProperty("defaultColumnSortable");if

[WARNING] Try to use a single 'var' statement per scope.
.isItemsChanged(itemArray,existingArr)){ ---> var  <--- preserveSelection=this.getInheritedProperty("preserveSelection");var 

[WARNING] Try to use a single 'var' statement per scope.
preserveSelection=this.getInheritedProperty("preserveSelection"); ---> var  <--- selection=null;if(preserveSelection){selection

[WARNING] Try to use a single 'var' statement per scope.
this.widget.getSelection();} ---> var  <--- cnt=itemArray.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=itemArray.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
var changeHandler=this.getExternalChangeHandler(); ---> var  <--- attributes={numCols:this.getNumCols()

[WARNING] Try to use a single 'var' statement per scope.
.getAlign()==_CENTER_)}; ---> var  <--- multiple=this.getMultiple();if(

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- id=this.getId();var widget

[WARNING] Try to use a single 'var' statement per scope.
var id=this.getId(); ---> var  <--- widget=this.getWidget();var value

[WARNING] Try to use a single 'var' statement per scope.
var widget=this.getWidget(); ---> var  <--- value=widget.getItems();this.

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- cssClass=this.getCssClass();var sourceListCssClass

[WARNING] Try to use a single 'var' statement per scope.
var cssClass=this.getCssClass(); ---> var  <--- sourceListCssClass=this.getListCssClass();var targetListCssClass

[WARNING] Try to use a single 'var' statement per scope.
var sourceListCssClass=this.getListCssClass(); ---> var  <--- targetListCssClass=this.getTargetListCssClass();var widgetClass

[WARNING] Try to use a single 'var' statement per scope.
var targetListCssClass=this.getTargetListCssClass(); ---> var  <--- widgetClass=this.getInheritedProperty("widgetClass");if

[WARNING] Try to use a single 'var' statement per scope.
!targetListCssClass){targetListCssClass=sourceListCssClass;} ---> var  <--- listSize=this.getInheritedProperty("listSize");var 

[WARNING] Try to use a single 'var' statement per scope.
listSize=this.getInheritedProperty("listSize"); ---> var  <--- params={parent:form,className:cssClass

[WARNING] Try to use a single 'var' statement per scope.
var origSourceItems=this.getSourceInstanceValue(); ---> var  <--- sourceItems;if(origSourceItems instanceof Array){var 

[WARNING] Try to use a single 'var' statement per scope.
sourceItems;if(origSourceItems instanceof Array){ ---> var  <--- _tmpSrcItems=[];var cnt=origSourceItems.

[WARNING] Try to use a single 'var' statement per scope.
Array){var _tmpSrcItems=[]; ---> var  <--- cnt=origSourceItems.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=origSourceItems.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
sourceItems=origSourceItems.clone();} ---> var  <--- targetItems=this.getTargetInstanceValue();if(

[WARNING] Try to use a single 'var' statement per scope.
targetItems);}if(dedup){ ---> var  <--- cnt=targetItems.size();for(

[WARNING] The variable cnt has already been declared in the same scope...
);}if(dedup){var  ---> cnt <--- =targetItems.size();for(var 

[WARNING] Try to use a single 'var' statement per scope.
=targetItems.size();for( ---> var  <--- i=0;i<cnt;i++

[WARNING] The variable i has already been declared in the same scope...
targetItems.size();for(var  ---> i <--- =0;i<cnt;i++)

[WARNING] Try to use a single 'var' statement per scope.
i++){if(compareFunc){ ---> var  <--- ix=sourceItems.indexOfLike(targetItems.get(

[WARNING] Try to use a single 'var' statement per scope.
removeAt(ix);}}else{ ---> var  <--- ix=sourceItems.indexOf(targetItems.get(

[WARNING] The variable ix has already been declared in the same scope...
(ix);}}else{var  ---> ix <--- =sourceItems.indexOf(targetItems.get(i

[WARNING] Try to use a single 'var' statement per scope.
removeAt(ix);}}}} ---> var  <--- sorted=this.getSorted();if(

[WARNING] Try to use a single 'var' statement per scope.
var style=this.getStyle(); ---> var  <--- iconVisible=this.getIconVisible();var title

[WARNING] Try to use a single 'var' statement per scope.
var iconVisible=this.getIconVisible(); ---> var  <--- title=this.getTitle();var content

[WARNING] Try to use a single 'var' statement per scope.
var title=this.getTitle(); ---> var  <--- content=this.getContent();var alertCssClass

[WARNING] Try to use a single 'var' statement per scope.
var content=this.getContent(); ---> var  <--- alertCssClass=this.getAlertCssClass();var form

[WARNING] Try to use a single 'var' statement per scope.
var alertCssClass=this.getAlertCssClass(); ---> var  <--- form=this.getForm();var alert

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- alert=new DwtAlert(form,alertCssClass);

[WARNING] Try to use a single 'var' statement per scope.
if(AjxEnv.isIE){try{ ---> var  <--- htmlElement=alert.getHtmlElement();var size

[WARNING] Try to use a single 'var' statement per scope.
var htmlElement=alert.getHtmlElement(); ---> var  <--- size=Dwt.getSize(htmlElement);var 

[WARNING] Try to use a single 'var' statement per scope.
size=Dwt.getSize(htmlElement); ---> var  <--- container=this.getContainer();var containerSize

[WARNING] Try to use a single 'var' statement per scope.
var container=this.getContainer(); ---> var  <--- containerSize=Dwt.getSize(container);var 

[WARNING] Try to use a single 'var' statement per scope.
containerSize=Dwt.getSize(container); ---> var  <--- style=DwtCssStyle.getComputedStyleObject(htmlElement);var 

[WARNING] The variable style has already been declared in the same scope...
=Dwt.getSize(container);var  ---> style <--- =DwtCssStyle.getComputedStyleObject(htmlElement);var bl

[WARNING] Try to use a single 'var' statement per scope.
style=DwtCssStyle.getComputedStyleObject(htmlElement); ---> var  <--- bl=parseInt(style.borderLeftWidth)||1

[WARNING] Try to use a single 'var' statement per scope.
parseInt(style.borderLeftWidth)||1; ---> var  <--- br=parseInt(style.borderRightWidth)||1

[WARNING] Try to use a single 'var' statement per scope.
parseInt(style.borderRightWidth)||1; ---> var  <--- pl=parseInt(style.paddingLeft)||5

[WARNING] Try to use a single 'var' statement per scope.
parseInt(style.paddingLeft)||5; ---> var  <--- pr=parseInt(style.paddingRight)||5

[WARNING] Try to use a single 'var' statement per scope.
parseInt(style.paddingRight)||5; ---> var  <--- ml=parseInt(style.marginLeft)||5

[WARNING] Try to use a single 'var' statement per scope.
parseInt(style.marginLeft)||5; ---> var  <--- mr=parseInt(style.marginRight)||5

[WARNING] Try to use a single 'var' statement per scope.
parseInt(style.marginRight)||5; ---> var  <--- extraWidth=bl+br+pl+pr+

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- widget=this.getWidget();var tabKey

[WARNING] Try to use a single 'var' statement per scope.
var widget=this.getWidget(); ---> var  <--- tabKey=widget.getCurrentTab();var newvalue

[WARNING] Try to use a single 'var' statement per scope.
var tabKey=widget.getCurrentTab(); ---> var  <--- newvalue=this._tabkey2value[tabKey];var 

[WARNING] Try to use a single 'var' statement per scope.
newvalue=this._tabkey2value[tabKey]; ---> var  <--- id=this.getId();form.

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- cssClass=this.getCssClass();var btnCssClass

[WARNING] Try to use a single 'var' statement per scope.
var cssClass=this.getCssClass(); ---> var  <--- btnCssClass=this.getInheritedProperty("buttonCssClass");var 

[WARNING] Try to use a single 'var' statement per scope.
btnCssClass=this.getInheritedProperty("buttonCssClass"); ---> var  <--- widget=new DwtTabBarFloat(form,cssClass,btnCssClass

[WARNING] Try to use a single 'var' statement per scope.
};this._tabkey2value={}; ---> var  <--- choices=this.getChoices();if(

[WARNING] Try to use a single 'var' statement per scope.
XFormChoices){this.choices=choices; ---> var  <--- listener=new AjxListener(this,this.dirtyDisplay

[WARNING] Try to use a single 'var' statement per scope.
addListener(DwtEvent.XFORMS_CHOICES_CHANGED,listener); ---> var  <--- values=this.getNormalizedValues();var labels

[WARNING] Try to use a single 'var' statement per scope.
var values=this.getNormalizedValues(); ---> var  <--- labels=this.getNormalizedLabels();var cnt

[WARNING] Try to use a single 'var' statement per scope.
var labels=this.getNormalizedLabels(); ---> var  <--- cnt=values.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=values.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
.paddingRight="2px";}}else{ ---> var  <--- cnt=choices.length;for(var i

[WARNING] The variable cnt has already been declared in the same scope...
paddingRight="2px";}}else{var  ---> cnt <--- =choices.length;for(var i=

[WARNING] Try to use a single 'var' statement per scope.
var cnt=choices.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] The variable i has already been declared in the same scope...
cnt=choices.length;for(var  ---> i <--- =0;i<cnt;i++)

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- choice=choices[i];this._value2tabkey

[WARNING] Try to use a single 'var' statement per scope.
var labels=this.getNormalizedLabels(); ---> var  <--- values=this.getNormalizedValues();var cnt

[WARNING] Try to use a single 'var' statement per scope.
var values=this.getNormalizedValues(); ---> var  <--- cnt=labels.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=labels.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- tabKey=this._value2tabkey[values[i]

[WARNING] Try to use a single 'var' statement per scope.
i]];if(tabKey){ ---> var  <--- btn=this.widget.getButton(tabKey)

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- widget=new DwtProgressBar(form,null);

[WARNING] Try to use a single 'var' statement per scope.
=new DwtProgressBar(form,null); ---> var  <--- maxvalue=this.getInheritedProperty("maxValue");if

[WARNING] Try to use a single 'var' statement per scope.
;}widget.setMaxValue(maxvalue); ---> var  <--- progressCssClass=this.getInheritedProperty("progressCssClass");if

[WARNING] Try to use a single 'var' statement per scope.
{widget.setProgressCssClass(progressCssClass);} ---> var  <--- wholeCssClass=this.getInheritedProperty("wholeCssClass");if

[WARNING] Try to use a single 'var' statement per scope.
,valueProperty,labelProperty){var values; ---> var  <--- labels;var visible;var totalInvisibleChoices=0;

[WARNING] Try to use a single 'var' statement per scope.
labelProperty){var values;var labels; ---> var  <--- visible;var totalInvisibleChoices=0;switch(type

[WARNING] Try to use a single 'var' statement per scope.
var values;var labels;var visible; ---> var  <--- totalInvisibleChoices=0;switch(type){case

[WARNING] Try to use a single 'var' statement per scope.
==null){labelProperty="label";} ---> var  <--- cnt=choices.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=choices.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
==null){labelProperty="label";} ---> var  <--- cnt=choices.length;for(var i

[WARNING] The variable cnt has already been declared in the same scope...
null){labelProperty="label";}var  ---> cnt <--- =choices.length;for(var i=

[WARNING] Try to use a single 'var' statement per scope.
var cnt=choices.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] The variable i has already been declared in the same scope...
cnt=choices.length;for(var  ---> i <--- =0;i<cnt;i++)

[WARNING] Try to use a single 'var' statement per scope.
];labels=[];for( ---> var  <--- prop in choices){values.push(prop

[WARNING] Try to use a single 'var' statement per scope.
autoDetermineType=function(){var type; ---> var  <--- choices=this._choiceObject;if(choices)

[WARNING] Try to use a single 'var' statement per scope.
(AjxUtil.isArray(choices)){ ---> var  <--- firstChoice=choices[0];if(AjxUtil

[WARNING] Try to use a single 'var' statement per scope.
=this._valueProperty||"value";for( ---> var  <--- i=0;i<this._choiceObject.

[WARNING] Try to use a single 'var' statement per scope.
break;caseXFormChoices.OBJECT_REFERENCE_LIST:for( ---> var  <--- i=0;i<this._choiceObject.

[WARNING] The variable i has already been declared in the same scope...
;caseXFormChoices.OBJECT_REFERENCE_LIST:for(var  ---> i <--- =0;i<this._choiceObject.length

[WARNING] Try to use a single 'var' statement per scope.
.constructor!=XFormChoices){return;} ---> var  <--- listener=new AjxListener(this,this.choicesChangeLsnr

[WARNING] Try to use a single 'var' statement per scope.
==null){newValue="";} ---> var  <--- el=this.getDisplayElement();if(

[WARNING] Try to use a single 'var' statement per scope.
)&&el.value!=newValue){ ---> var  <--- i=0;}el.value=newValue

[WARNING] The variable i has already been declared in the same scope...
&&el.value!=newValue){var  ---> i <--- =0;}el.value=newValue;

[WARNING] Try to use a single 'var' statement per scope.
var id=this.getMenuElementId(); ---> var  <--- el=this.getElement(id);if

[WARNING] Try to use a single 'var' statement per scope.
var id=this.getNoteElementId(); ---> var  <--- el=this.getElement(id);if

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- formElement=form.getHtmlElement();if(

[WARNING] Try to use a single 'var' statement per scope.
;OSelect1_XFormItem._mouseWheelEventAttached=true;}} ---> var  <--- menu=this.getMenuElement();if(

[WARNING] Try to use a single 'var' statement per scope.
.innerHTML=this.getChoicesHTML(); ---> var  <--- bounds;if(this.getInheritedProperty("editable")

[WARNING] Try to use a single 'var' statement per scope.
(this.getElement());} ---> var  <--- w=DwtShell.getShell(window).getSize

[WARNING] Try to use a single 'var' statement per scope.
getShell(window).getSize(); ---> var  <--- wh=w.y;var WINDOW_GUTTER=8

[WARNING] Try to use a single 'var' statement per scope.
);var wh=w.y; ---> var  <--- WINDOW_GUTTER=8;menu.style.left=

[WARNING] Try to use a single 'var' statement per scope.
bounds.height)-1+"px"; ---> var  <--- choices=this.getNormalizedChoices();if(

[WARNING] Try to use a single 'var' statement per scope.
{menu.style.overflow="auto"; ---> var  <--- visibleChoices=choices.values.length-choices.

[WARNING] Try to use a single 'var' statement per scope.
menu.style.height="auto";} ---> var  <--- value=this.getInstanceValue();var getDisplayValueMethod

[WARNING] Try to use a single 'var' statement per scope.
var value=this.getInstanceValue(); ---> var  <--- getDisplayValueMethod=this.getDisplayValueMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
.call(this,value);} ---> var  <--- selectedItemNum=this.getChoiceNum(value);this

[WARNING] Try to use a single 'var' statement per scope.
;menu.style.display="block"; ---> var  <--- mBounds=this.getBounds(menu);var 

[WARNING] Try to use a single 'var' statement per scope.
mBounds=this.getBounds(menu); ---> var  <--- menuHeight=mBounds.height;var menuTop=mBounds

[WARNING] Try to use a single 'var' statement per scope.
);var menuHeight=mBounds.height; ---> var  <--- menuTop=mBounds.top;if(this.

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- formElement=form.getHtmlElement();if(

[WARNING] Try to use a single 'var' statement per scope.
(menu==null){return;} ---> var  <--- mBounds=this.getBounds(menu);var 

[WARNING] Try to use a single 'var' statement per scope.
mBounds=this.getBounds(menu); ---> var  <--- menuHeight=mBounds.height;var menuTop=mBounds

[WARNING] Try to use a single 'var' statement per scope.
);var menuHeight=mBounds.height; ---> var  <--- menuTop=mBounds.top;var newTop=parseInt

[WARNING] Try to use a single 'var' statement per scope.
height;var menuTop=mBounds.top; ---> var  <--- newTop=parseInt(menuTop)+parseInt(y

[WARNING] Try to use a single 'var' statement per scope.
(menuTop)+parseInt(y); ---> var  <--- newBotton=parseInt(newTop)+parseInt(menuHeight

[WARNING] Try to use a single 'var' statement per scope.
;note.style.display="block"; ---> var  <--- bounds;if(this.getInheritedProperty("editable")

[WARNING] Try to use a single 'var' statement per scope.
found=false;if(ev){ ---> var  <--- htmlEl=DwtUiEvent.getTarget(ev);var 

[WARNING] Try to use a single 'var' statement per scope.
htmlEl=DwtUiEvent.getTarget(ev); ---> var  <--- inputId=this.getId()+"_display";

[WARNING] Try to use a single 'var' statement per scope.
=this.getId()+"_display"; ---> var  <--- arrowId=this.getId()+"_arrow_button";

[WARNING] Try to use a single 'var' statement per scope.
window.event;var found=false; ---> var  <--- htmlEl;if(ev){htmlEl=DwtUiEvent

[WARNING] Try to use a single 'var' statement per scope.
htmlEl=DwtUiEvent.getTarget(ev); ---> var  <--- inputId=this.getId()+"_display";

[WARNING] Try to use a single 'var' statement per scope.
=this.getId()+"_display"; ---> var  <--- arrowId=this.getId()+"_arrow_button";

[WARNING] Try to use a single 'var' statement per scope.
attributes&&htmlEl.attributes.length){ ---> var  <--- cnt=htmlEl.attributes.length;for(

[WARNING] Try to use a single 'var' statement per scope.
=htmlEl.attributes.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
body:anElement.ownerDocument.body;} ---> var  <--- hasScroll=(anElement.scrollLeft!==void 0)

[WARNING] Try to use a single 'var' statement per scope.
(anElement.scrollLeft!==void 0); ---> var  <--- trace=anElement;while(trace!=null&&

[WARNING] Try to use a single 'var' statement per scope.
;myBounds.top+=trace.offsetTop; ---> var  <--- nextEl=trace.offsetParent;while(hasScroll&&

[WARNING] The variable value has already been declared in the same scope...
&&this.__currentHiliteItem!=undefined){var  ---> value <--- =this.getNormalizedValues()[this.__currentHiliteItem

[WARNING] Try to use a single 'var' statement per scope.
;}}this.isSelecting=false; ---> var  <--- method=this.getKeyUpMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
this.getNormalizedValues()[itemNum]; ---> var  <--- editable=this.getInheritedProperty("editable");if

[WARNING] Try to use a single 'var' statement per scope.
){if(target.id){ ---> var  <--- itemNum=parseInt(target.id);if

[WARNING] Try to use a single 'var' statement per scope.
var id=this.getId(); ---> var  <--- ref=this.getFormGlobalRef()+".getItemById('"+

[WARNING] Try to use a single 'var' statement per scope.
()+".getItemById('"+id+"')"; ---> var  <--- inputHtml;var editable=this.getInheritedProperty("editable"

[WARNING] Try to use a single 'var' statement per scope.
".getItemById('"+id+"')";var inputHtml; ---> var  <--- editable=this.getInheritedProperty("editable");if

[WARNING] Try to use a single 'var' statement per scope.
("editable");if(editable){ ---> var  <--- inputSize=this.getInheritedProperty("inputSize");inputHtml

[WARNING] Try to use a single 'var' statement per scope.
()=="auto"&&!editable){ ---> var  <--- element=this.getElement("tempDiv");if

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getDisplayCssClass(); ---> var  <--- el=this.getArrowElement();if(

[WARNING] Try to use a single 'var' statement per scope.
=this.getDisplayCssClass()+"_disabled"; ---> var  <--- el=this.getArrowElement();this.

[WARNING] The variable el has already been declared in the same scope...
this.getDisplayCssClass()+"_disabled";var  ---> el <--- =this.getArrowElement();this.getForm

[WARNING] Try to use a single 'var' statement per scope.
.split(",");}for( ---> var  <--- i=0;i<values.length;

[WARNING] Try to use a single 'var' statement per scope.
<values.length;i++){ ---> var  <--- itemNum=this.getChoiceNum(values[i]

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);}}}else{ ---> var  <--- itemNum=this.getChoiceNum(values);if

[WARNING] The variable itemNum has already been declared in the same scope...
itemNum);}}}else{var  ---> itemNum <--- =this.getChoiceNum(values);if(

[WARNING] Try to use a single 'var' statement per scope.
window.event;var clearOthers=true; ---> var  <--- includeIntermediates=false;if(this.getMultiple(

[WARNING] Try to use a single 'var' statement per scope.
(includeIntermediates){newValues=[]; ---> var  <--- vals=this.getNormalizedValues();var start

[WARNING] Try to use a single 'var' statement per scope.
var vals=this.getNormalizedValues(); ---> var  <--- start=this._selectionCursor;var dist=this

[WARNING] Try to use a single 'var' statement per scope.
);var start=this._selectionCursor; ---> var  <--- dist=this._selectionAnchor-this._selectionCursor;

[WARNING] Try to use a single 'var' statement per scope.
start=this._selectionAnchor;}for( ---> var  <--- i=start;i<=start+dist;

[WARNING] Try to use a single 'var' statement per scope.
[i]);}}else{ ---> var  <--- oldValues=this.getInstanceValue();if(

[WARNING] Try to use a single 'var' statement per scope.
){newValues=[];for( ---> var  <--- a in oldValues){newValues[a]=

[WARNING] Try to use a single 'var' statement per scope.
{newValues=new Array();} ---> var  <--- found=false;var i;for(i

[WARNING] Try to use a single 'var' statement per scope.
();}var found=false; ---> var  <--- i;for(i=0;i<

[WARNING] The variable i has already been declared in the same scope...
);}var found=false;var  ---> i <--- ;for(i=0;i<newValues

[WARNING] Try to use a single 'var' statement per scope.
)){newValues=[];} ---> var  <--- modelItem=this.getModelItem();if(

[WARNING] Try to use a single 'var' statement per scope.
if(!choices){return;} ---> var  <--- values=choices.values;if(!values

[WARNING] Try to use a single 'var' statement per scope.
if(!values){return;} ---> var  <--- cnt=values.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=values.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- chkbx=this.getElement(this.getId(

[WARNING] Try to use a single 'var' statement per scope.
+this.getId()+"')"; ---> var  <--- id=this.getId();returnAjxBuffer

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);if(chEl){ ---> var  <--- el=chEl[0];el.className

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getChoiceSelectedCssClass(); ---> var  <--- checks=el.getElementsByTagName("input");if

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);if(chEl){ ---> var  <--- el=chEl[0];el.className

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getChoiceCssClass(); ---> var  <--- checks=el.getElementsByTagName("input");if

[WARNING] Try to use a single 'var' statement per scope.
$normalizedChoices&&this.$normalizedChoices.values){ ---> var  <--- choices=this.$normalizedChoices.values;var cnt

[WARNING] Try to use a single 'var' statement per scope.
var choices=this.$normalizedChoices.values; ---> var  <--- cnt=choices.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=choices.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
.split(",");}for( ---> var  <--- i=0;i<values.length;

[WARNING] Try to use a single 'var' statement per scope.
<values.length;i++){ ---> var  <--- itemNum=this.getChoiceNum(values[i]

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);}}}else{ ---> var  <--- itemNum=this.getChoiceNum(values);if

[WARNING] The variable itemNum has already been declared in the same scope...
itemNum);}}}else{var  ---> itemNum <--- =this.getChoiceNum(values);if(

[WARNING] Try to use a single 'var' statement per scope.
var choices=this.getNormalizedChoices(); ---> var  <--- cnt;if(choices.values){cnt

[WARNING] Try to use a single 'var' statement per scope.
=choices.values.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
window.event;var clearOthers=true; ---> var  <--- includeIntermediates=false;if(this.getMultiple(

[WARNING] Try to use a single 'var' statement per scope.
(includeIntermediates){newValues=[]; ---> var  <--- vals=this.getNormalizedValues();var start

[WARNING] Try to use a single 'var' statement per scope.
var vals=this.getNormalizedValues(); ---> var  <--- start=this._subSelectionCursor;var dist=this

[WARNING] Try to use a single 'var' statement per scope.
);var start=this._subSelectionCursor; ---> var  <--- dist=this._subSelectionAnchor-this._subSelectionCursor;

[WARNING] Try to use a single 'var' statement per scope.
start=this._subSelectionAnchor;}for( ---> var  <--- i=start;i<=start+dist;

[WARNING] Try to use a single 'var' statement per scope.
[i]);}}else{ ---> var  <--- oldValues=this.getInstanceValue(this.getInheritedProperty(

[WARNING] Try to use a single 'var' statement per scope.
){newValues=[];for( ---> var  <--- a in oldValues){newValues[a]=

[WARNING] Try to use a single 'var' statement per scope.
{newValues=new Array();} ---> var  <--- found=false;for(var i=0

[WARNING] Try to use a single 'var' statement per scope.
;}var found=false;for( ---> var  <--- i=0;i<newValues.length;

[WARNING] The variable i has already been declared in the same scope...
}var found=false;for(var  ---> i <--- =0;i<newValues.length;i

[WARNING] Try to use a single 'var' statement per scope.
)){newValues=[];} ---> var  <--- modelItem=this.getSubModelItem();if(

[WARNING] Try to use a single 'var' statement per scope.
+this.getId()+"')"; ---> var  <--- id=this.getId();var subLabel

[WARNING] Try to use a single 'var' statement per scope.
var id=this.getId(); ---> var  <--- subLabel=this.getSubLabel();returnAjxBuffer

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);if(chEl){ ---> var  <--- el=chEl[0];el.className

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getChoiceSelectedCssClass(); ---> var  <--- checks=el.getElementsByTagName("input");if

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);if(chEl){ ---> var  <--- el=chEl[0];el.className

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getChoiceCssClass(); ---> var  <--- checks=el.getElementsByTagName("input");if

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);if(chEl){ ---> var  <--- el=chEl[3];el.className

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getChoiceSelectedCssClass(); ---> var  <--- checks=el.getElementsByTagName("input");if

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);if(chEl){ ---> var  <--- el=chEl[3];el.className

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getChoiceCssClass(); ---> var  <--- checks=el.getElementsByTagName("input");if

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);if(chEl){ ---> var  <--- el=chEl[3];el.className

[WARNING] Try to use a single 'var' statement per scope.
=this.getChoiceCssClass()+"_disabled"; ---> var  <--- checks=el.getElementsByTagName("input");if

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);if(chEl){ ---> var  <--- el=chEl[3];el.className

[WARNING] Try to use a single 'var' statement per scope.
.className=this.getChoiceCssClass(); ---> var  <--- checks=el.getElementsByTagName("input");if

[WARNING] Try to use a single 'var' statement per scope.
.innerHTML=this.getChoicesHTML(); ---> var  <--- values=this.getInstanceValue();this.

[WARNING] Try to use a single 'var' statement per scope.
.split(",");}for( ---> var  <--- i=0;i<values.length;

[WARNING] Try to use a single 'var' statement per scope.
<values.length;i++){ ---> var  <--- itemNum=this.getChoiceNum(values[i]

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);}}}else{ ---> var  <--- itemNum=this.getChoiceNum(values);if

[WARNING] The variable itemNum has already been declared in the same scope...
itemNum);}}}else{var  ---> itemNum <--- =this.getChoiceNum(values);if(

[WARNING] Try to use a single 'var' statement per scope.
.hiliteChoice(itemNum);}}} ---> var  <--- subValues=this.getInstanceValue(this.getInheritedProperty(

[WARNING] Try to use a single 'var' statement per scope.
.split(",");}for( ---> var  <--- i=0;i<subValues.length;

[WARNING] The variable i has already been declared in the same scope...
split(",");}for(var  ---> i <--- =0;i<subValues.length;i

[WARNING] Try to use a single 'var' statement per scope.
<subValues.length;i++){ ---> var  <--- itemNum=this.getChoiceNum(subValues[i]

[WARNING] The variable itemNum has already been declared in the same scope...
subValues.length;i++){var  ---> itemNum <--- =this.getChoiceNum(subValues[i])

[WARNING] Try to use a single 'var' statement per scope.
(itemNum);}}}else{ ---> var  <--- itemNum=this.getChoiceNum(values);if

[WARNING] The variable itemNum has already been declared in the same scope...
itemNum);}}}else{var  ---> itemNum <--- =this.getChoiceNum(values);if(

[WARNING] Try to use a single 'var' statement per scope.
if(!choices){return;} ---> var  <--- values=choices.values;if(!values

[WARNING] Try to use a single 'var' statement per scope.
if(!values){return;} ---> var  <--- cnt=values.length;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var cnt=values.length;for( ---> var  <--- i=0;i<cnt;i++

[WARNING] Try to use a single 'var' statement per scope.
;i<cnt;i++){ ---> var  <--- chkbx=this.getElement(this.getId(

[WARNING] Try to use a single 'var' statement per scope.
getId()+"_choiceitem_"+i); ---> var  <--- chkbxSub=this.getElement(this.getId(

[WARNING] Try to use a single 'var' statement per scope.
this.value=[];}; ---> var  <--- BGP=ButtonGrid.prototype;BGP.choices=

[WARNING] Try to use a single 'var' statement per scope.
=value.split(",");} ---> var  <--- uniqueStartStr="{|[",uniqueEndStr="]|}";value=

[WARNING] Try to use a single 'var' statement per scope.
join(uniqueEndStr+uniqueStartStr)+uniqueEndStr; ---> var  <--- choices=this.choices;for(var i

[WARNING] Try to use a single 'var' statement per scope.
var choices=this.choices;for( ---> var  <--- i=0;i<choices.length;

[WARNING] Try to use a single 'var' statement per scope.
<choices.length;i++){ ---> var  <--- element=XFG.getEl(this.getButtonId(

[WARNING] Try to use a single 'var' statement per scope.
(this.getButtonId(i)); ---> var  <--- isPresent=(value.indexOf(uniqueStartStr+choices

[WARNING] Try to use a single 'var' statement per scope.
}var buffer=new AjxBuffer(); ---> var  <--- buttonCssClass=this.cssClass+"_button";buffer.

[WARNING] Try to use a single 'var' statement per scope.
'<table class="',this.cssClass,'_table">'); ---> var  <--- i=0;var numRows=Math.ceil

[WARNING] Try to use a single 'var' statement per scope.
,'_table">');var i=0; ---> var  <--- numRows=Math.ceil(this.choices.

[WARNING] Try to use a single 'var' statement per scope.
length/this.numCols);for( ---> var  <--- r=0;r<numRows;r++

[WARNING] Try to use a single 'var' statement per scope.
.cssClass+"_start></div></td>");}for( ---> var  <--- c=0;c<this.numCols;

[WARNING] Try to use a single 'var' statement per scope.
<this.numCols;c++){ ---> var  <--- choice=this.choices[i];if

[WARNING] Try to use a single 'var' statement per scope.
){var i=0;for( ---> var  <--- r=0;r<numRows;r++

[WARNING] Try to use a single 'var' statement per scope.
<numRows;r++){for( ---> var  <--- c=0;c<this.numCols;

[WARNING] Try to use a single 'var' statement per scope.
<this.numCols;c++){ ---> var  <--- btn=document.getElementById(this.getButtonId(

[WARNING] Try to use a single 'var' statement per scope.
;}this.setChoices(choices); ---> var  <--- listener=new AjxListener(this,this.choicesChangeLsnr

[WARNING] Try to use a single 'var' statement per scope.
fetchDataDefault;this.dataFetcherObject=this;} ---> var  <--- currentTabId=XFormItem.getParentTabGroupId(this);this

[WARNING] Try to use a single 'var' statement per scope.
+"_display");if(currentTabId){ ---> var  <--- tabGroupItem=this.getForm().getItemById(

[WARNING] Try to use a single 'var' statement per scope.
null&&this.__currentHiliteItem!=undefined){ ---> var  <--- value=this.getNormalizedValues()[this.

[WARNING] The variable value has already been declared in the same scope...
&&this.__currentHiliteItem!=undefined){var  ---> value <--- =this.getNormalizedValues()[this.__currentHiliteItem

[WARNING] Try to use a single 'var' statement per scope.
;}}this.isSelecting=false; ---> var  <--- method=this.getKeyUpMethod();if(

[WARNING] Try to use a single 'var' statement per scope.
,value,event);}else{ ---> var  <--- key=DwtKeyEvent.getCharCode(event);if

[WARNING] Try to use a single 'var' statement per scope.
);this.keyPressDelayHdlr=null;} ---> var  <--- form=this.getForm();var evt

[WARNING] Try to use a single 'var' statement per scope.
var form=this.getForm(); ---> var  <--- evt=new DwtKeyEvent();evt.setFromDhtmlEvent

[WARNING] Try to use a single 'var' statement per scope.
.keyCode==DwtKeyEvent.KEY_ESCAPE)){ ---> var  <--- action=new AjxTimedAction(this,this.handleKeyPressDelay

[WARNING] Try to use a single 'var' statement per scope.
){this.hideMenu();} ---> var  <--- currentTabId=XFormItem.getParentTabGroupId(this);if

[WARNING] Try to use a single 'var' statement per scope.
);}this.keyPressDelayHdlr=null; ---> var  <--- val=this.preProcessInput(value);if

[WARNING] Try to use a single 'var' statement per scope.
!this.dataFetcherObject){return;} ---> var  <--- callback=new AjxCallback(this,this.changeChoicesCallback

[WARNING] Try to use a single 'var' statement per scope.
AjxCallback(this,this.changeChoicesCallback); ---> var  <--- searchByProcessedValue=this.getInheritedProperty("searchByProcessedValue");var 

[WARNING] Try to use a single 'var' statement per scope.
searchByProcessedValue=this.getInheritedProperty("searchByProcessedValue"); ---> var  <--- callArgs={event:event,callback:callback

[WARNING] Try to use a single 'var' statement per scope.
var id=this.getId(); ---> var  <--- ref=this.getFormGlobalRef()+".getItemById('"+

[WARNING] Try to use a single 'var' statement per scope.
()+".getItemById('"+id+"')"; ---> var  <--- inputHtml;var inputSize=this.getInheritedProperty("inputSize"

[WARNING] Try to use a single 'var' statement per scope.
".getItemById('"+id+"')";var inputHtml; ---> var  <--- inputSize=this.getInheritedProperty("inputSize");var 

[WARNING] Try to use a single 'var' statement per scope.
inputSize=this.getInheritedProperty("inputSize"); ---> var  <--- inputWidth=this.getInheritedProperty("inputWidth");var 

[WARNING] Try to use a single 'var' statement per scope.
inputWidth=this.getInheritedProperty("inputWidth"); ---> var  <--- keyPressEv=" onkeypress";if(!AjxEnv.isFirefox

[WARNING] Try to use a single 'var' statement per scope.
.isFirefox){keyPressEv=" onkeydown";} ---> var  <--- inputWidthString=inputWidth?"style='width:"+inputWidth+"'":

[WARNING] Try to use a single 'var' statement per scope.
,itemId=this.getId(); ---> var  <--- onMouseoutAction="";var onMouseoutFunc=this.getInheritedProperty

[WARNING] Try to use a single 'var' statement per scope.
getId();var onMouseoutAction=""; ---> var  <--- onMouseoutFunc=this.getInheritedProperty("onMouseout");onMouseoutAction

[WARNING] Try to use a single 'var' statement per scope.
())&&this._enabled){ ---> var  <--- el=this.getDisplayElement();el.

[WARNING] Try to use a single 'var' statement per scope.
var preProcessMethod=this.getPreProcessMethod(); ---> var  <--- val=value;if(preProcessMethod){val

[WARNING] Try to use a single 'var' statement per scope.
=this.getChoiceLabel(newValue);} ---> var  <--- el=this.getDisplayElement();if(

[WARNING] Try to use a single 'var' statement per scope.
._enabled&&!this.edited){ ---> var  <--- emptyText=this.getInheritedProperty("emptyText");if

[WARNING] Try to use a single 'var' statement per scope.
)[0]){return;} ---> var  <--- table=el.getElementsByTagName("table")[0

[WARNING] Try to use a single 'var' statement per scope.
=this.getDisplayCssClass()+"_disabled"; ---> var  <--- el=this.getArrowElement();if(

[WARNING] The variable el has already been declared in the same scope...
this.getDisplayCssClass()+"_disabled";var  ---> el <--- =this.getArrowElement();if(el

[WARNING] Try to use a single 'var' statement per scope.
var value=this.getInstanceValue(); ---> var  <--- processEntryKey=this.getInheritedProperty("entryKeyMethod");if

[WARNING] Found an undeclared symbol: XFG
(AjxPackage.define("ajax.dwt.xforms.XFormGlobal")){ ---> XFG <--- =function(){};XFG.prefixList

[WARNING] Found an undeclared symbol: i
var options=element.options;for( ---> i <--- =0;i<options.length;i

[WARNING] Found an undeclared symbol: Dwt
getId()+"_datalist";var oldDataList= ---> Dwt <--- .getElement(dataListId);if(oldDataList)

[WARNING] The symbol t0 is declared but is apparently never used.
This code can probably be written in a more compact way.
this._itemsAreInitialized){return;}var  ---> t0 <--- =new Date().getTime();

[WARNING] The symbol t1 is declared but is apparently never used.
This code can probably be written in a more compact way.
);this._itemsAreInitialized=true;var  ---> t1 <--- =new Date().getTime();

[WARNING] The symbol t0 is declared but is apparently never used.
This code can probably be written in a more compact way.
prototype.outputForm=function(){var  ---> t0 <--- =new Date().getTime();

[WARNING] The symbol instance is declared but is apparently never used.
This code can probably be written in a more compact way.
[i])=="string"){var  ---> instance <--- =this.getInstance();isVisible=eval

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.keyPressDelayHdlr=null;}var  ---> form <--- =this.getForm();var evt=

[WARNING] The symbol modelItem is declared but is apparently never used.
This code can probably be written in a more compact way.
value=this.getValue();var  ---> modelItem <--- =this.getModelItem();var inputHelp=

[WARNING] The symbol inputHelp is declared but is apparently never used.
This code can probably be written in a more compact way.
modelItem=this.getModelItem();var  ---> inputHelp <--- =this.getInheritedProperty("inputHelp");html.

[WARNING] The symbol formId is declared but is apparently never used.
This code can probably be written in a more compact way.
prototype.getClickHandlerHTML=function(){var  ---> formId <--- =this.getFormGlobalRef(),itemId=this

[WARNING] The symbol itemId is declared but is apparently never used.
This code can probably be written in a more compact way.
var formId=this.getFormGlobalRef(), ---> itemId <--- =this.getId();var onClickAction=

[WARNING] The symbol formId is declared but is apparently never used.
This code can probably be written in a more compact way.
prototype.getMouseoutHandlerHTML=function(){var  ---> formId <--- =this.getFormGlobalRef(),itemId=this

[WARNING] The symbol itemId is declared but is apparently never used.
This code can probably be written in a more compact way.
var formId=this.getFormGlobalRef(), ---> itemId <--- =this.getId();var onMouseoutAction=

[WARNING] The symbol accessKey is declared but is apparently never used.
This code can probably be written in a more compact way.
""){label="&nbsp;";}var  ---> accessKey <--- =this.getInheritedProperty("labelValue");if(

[WARNING] The symbol instance is declared but is apparently never used.
This code can probably be written in a more compact way.
[i])=="string"){var  ---> instance <--- =this.getInstance();isVisible=eval

[WARNING] The symbol masterId is declared but is apparently never used.
This code can probably be written in a more compact way.
(!element){return;}var  ---> masterId <--- =this.getId();if(this

[WARNING] The symbol masterId is declared but is apparently never used.
This code can probably be written in a more compact way.
slotsPresent=this.items.length;var  ---> masterId <--- =this.getId();if(itemsToShow

[WARNING] The symbol missingElementCount is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(itemsToShow>slotsPresent){var  ---> missingElementCount <--- =(itemsToShow-slotsPresent);var table=

[WARNING] The symbol cal is declared but is apparently never used.
This code can probably be written in a more compact way.
{var value=event.detail;var  ---> cal <--- =event.item;var elemChanged=this.

[WARNING] The symbol visibleChoices is declared but is apparently never used.
This code can probably be written in a more compact way.
menu.style.overflow="auto";var  ---> visibleChoices <--- =choices.values.length-choices.totalInvisibleChoices

[WARNING] The symbol newBotton is declared but is apparently never used.
This code can probably be written in a more compact way.
menuTop)+parseInt(y);var  ---> newBotton <--- =parseInt(newTop)+parseInt(menuHeight)

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.keyPressDelayHdlr=null;}var  ---> form <--- =this.getForm();var evt=

[WARNING] The symbol formId is declared but is apparently never used.
This code can probably be written in a more compact way.
prototype.getMouseoutHandlerHTML=function(){var  ---> formId <--- =this.getFormGlobalRef(),itemId=this

[WARNING] The symbol itemId is declared but is apparently never used.
This code can probably be written in a more compact way.
var formId=this.getFormGlobalRef(), ---> itemId <--- =this.getId();var onMouseoutAction=
